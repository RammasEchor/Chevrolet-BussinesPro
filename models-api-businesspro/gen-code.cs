//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace models_api_businesspro
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class BusinessPro 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public BusinessPro(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CrearResponse> CrearAsync(CrearAccionesCampoRequest body)
        {
            return CrearAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CrearResponse> CrearAsync(CrearAccionesCampoRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/AccionesCampo/Crear");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrearResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActualizarResponse> ActualizarAsync(int idAccionesCampo, ActualizarAccionesCampoRequest body)
        {
            return ActualizarAsync(idAccionesCampo, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActualizarResponse> ActualizarAsync(int idAccionesCampo, ActualizarAccionesCampoRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (idAccionesCampo == null)
                throw new System.ArgumentNullException("idAccionesCampo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/AccionesCampo/Actualizar/{idAccionesCampo}");
            urlBuilder_.Replace("{idAccionesCampo}", System.Uri.EscapeDataString(ConvertToString(idAccionesCampo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActualizarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EliminarResponse> EliminarAsync(int idAccionesCampo)
        {
            return EliminarAsync(idAccionesCampo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EliminarResponse> EliminarAsync(int idAccionesCampo, System.Threading.CancellationToken cancellationToken)
        {
            if (idAccionesCampo == null)
                throw new System.ArgumentNullException("idAccionesCampo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/AccionesCampo/Eliminar/{idAccionesCampo}");
            urlBuilder_.Replace("{idAccionesCampo}", System.Uri.EscapeDataString(ConvertToString(idAccionesCampo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EliminarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccionesCampoResponse> ObtenerAsync(int idAccionesCampo)
        {
            return ObtenerAsync(idAccionesCampo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccionesCampoResponse> ObtenerAsync(int idAccionesCampo, System.Threading.CancellationToken cancellationToken)
        {
            if (idAccionesCampo == null)
                throw new System.ArgumentNullException("idAccionesCampo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/AccionesCampo/Obtener/{idAccionesCampo}");
            urlBuilder_.Replace("{idAccionesCampo}", System.Uri.EscapeDataString(ConvertToString(idAccionesCampo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccionesCampoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccionesCampoResponse>> ListarAsync()
        {
            return ListarAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccionesCampoResponse>> ListarAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/AccionesCampo/Listar");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AccionesCampoResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task SincronizarAsync()
        {
            return SincronizarAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task SincronizarAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/AccionesCampo/Sincronizar");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CrearResponse> Crear2Async(int idAccionesCampo, AccionesCampoDetalleRequest body)
        {
            return Crear2Async(idAccionesCampo, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CrearResponse> Crear2Async(int idAccionesCampo, AccionesCampoDetalleRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (idAccionesCampo == null)
                throw new System.ArgumentNullException("idAccionesCampo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/AccionesCampoDetalle/Crear/{idAccionesCampo}");
            urlBuilder_.Replace("{idAccionesCampo}", System.Uri.EscapeDataString(ConvertToString(idAccionesCampo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrearResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActualizarResponse> Actualizar2Async(int idAccionesCampo, int idAccionesCampoDetalle, AccionesCampoDetalleRequest body)
        {
            return Actualizar2Async(idAccionesCampo, idAccionesCampoDetalle, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActualizarResponse> Actualizar2Async(int idAccionesCampo, int idAccionesCampoDetalle, AccionesCampoDetalleRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (idAccionesCampo == null)
                throw new System.ArgumentNullException("idAccionesCampo");

            if (idAccionesCampoDetalle == null)
                throw new System.ArgumentNullException("idAccionesCampoDetalle");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/AccionesCampoDetalle/Actualizar/{idAccionesCampo}/{idAccionesCampoDetalle}");
            urlBuilder_.Replace("{idAccionesCampo}", System.Uri.EscapeDataString(ConvertToString(idAccionesCampo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idAccionesCampoDetalle}", System.Uri.EscapeDataString(ConvertToString(idAccionesCampoDetalle, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActualizarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EliminarResponse> Eliminar2Async(int idAccionesCampo, int idAccionesCampoDetalle)
        {
            return Eliminar2Async(idAccionesCampo, idAccionesCampoDetalle, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EliminarResponse> Eliminar2Async(int idAccionesCampo, int idAccionesCampoDetalle, System.Threading.CancellationToken cancellationToken)
        {
            if (idAccionesCampo == null)
                throw new System.ArgumentNullException("idAccionesCampo");

            if (idAccionesCampoDetalle == null)
                throw new System.ArgumentNullException("idAccionesCampoDetalle");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/AccionesCampoDetalle/Eliminar/{idAccionesCampo}/{idAccionesCampoDetalle}");
            urlBuilder_.Replace("{idAccionesCampo}", System.Uri.EscapeDataString(ConvertToString(idAccionesCampo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idAccionesCampoDetalle}", System.Uri.EscapeDataString(ConvertToString(idAccionesCampoDetalle, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EliminarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccionesCampoDetalleResponse> Obtener2Async(int idAccionesCampo, int idAccionesCampoDetalle)
        {
            return Obtener2Async(idAccionesCampo, idAccionesCampoDetalle, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccionesCampoDetalleResponse> Obtener2Async(int idAccionesCampo, int idAccionesCampoDetalle, System.Threading.CancellationToken cancellationToken)
        {
            if (idAccionesCampo == null)
                throw new System.ArgumentNullException("idAccionesCampo");

            if (idAccionesCampoDetalle == null)
                throw new System.ArgumentNullException("idAccionesCampoDetalle");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/AccionesCampoDetalle/Obtener/{idAccionesCampo}/{idAccionesCampoDetalle}");
            urlBuilder_.Replace("{idAccionesCampo}", System.Uri.EscapeDataString(ConvertToString(idAccionesCampo, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idAccionesCampoDetalle}", System.Uri.EscapeDataString(ConvertToString(idAccionesCampoDetalle, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccionesCampoDetalleResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccionesCampoDetalleResponse>> Listar2Async(int idAccionesCampo)
        {
            return Listar2Async(idAccionesCampo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccionesCampoDetalleResponse>> Listar2Async(int idAccionesCampo, System.Threading.CancellationToken cancellationToken)
        {
            if (idAccionesCampo == null)
                throw new System.ArgumentNullException("idAccionesCampo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/AccionesCampoDetalle/Listar/{idAccionesCampo}");
            urlBuilder_.Replace("{idAccionesCampo}", System.Uri.EscapeDataString(ConvertToString(idAccionesCampo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AccionesCampoDetalleResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Obtener3Async(string idCatalogo)
        {
            return Obtener3Async(idCatalogo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Obtener3Async(string idCatalogo, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Catalogo/Obtener/{idCatalogo}");
            urlBuilder_.Replace("{idCatalogo}", System.Uri.EscapeDataString(ConvertToString(idCatalogo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CrearResponse> Crear3Async(CrearCitaRequest body)
        {
            return Crear3Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CrearResponse> Crear3Async(CrearCitaRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Cita/Crear");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrearResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActualizarResponse> Actualizar3Async(int idCita, ActualizarCitaRequest body)
        {
            return Actualizar3Async(idCita, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActualizarResponse> Actualizar3Async(int idCita, ActualizarCitaRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (idCita == null)
                throw new System.ArgumentNullException("idCita");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Cita/Actualizar/{idCita}");
            urlBuilder_.Replace("{idCita}", System.Uri.EscapeDataString(ConvertToString(idCita, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActualizarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EliminarResponse> Eliminar3Async(int idCita)
        {
            return Eliminar3Async(idCita, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EliminarResponse> Eliminar3Async(int idCita, System.Threading.CancellationToken cancellationToken)
        {
            if (idCita == null)
                throw new System.ArgumentNullException("idCita");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Cita/Eliminar/{idCita}");
            urlBuilder_.Replace("{idCita}", System.Uri.EscapeDataString(ConvertToString(idCita, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EliminarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CitaResponse> Obtener4Async(int idCita)
        {
            return Obtener4Async(idCita, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CitaResponse> Obtener4Async(int idCita, System.Threading.CancellationToken cancellationToken)
        {
            if (idCita == null)
                throw new System.ArgumentNullException("idCita");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Cita/Obtener/{idCita}");
            urlBuilder_.Replace("{idCita}", System.Uri.EscapeDataString(ConvertToString(idCita, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CitaResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CitaResponse>> Listar3Async()
        {
            return Listar3Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CitaResponse>> Listar3Async(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Cita/Listar");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CitaResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Sincronizar2Async()
        {
            return Sincronizar2Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Sincronizar2Async(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Cita/Sincronizar");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CrearResponse> Crear4Async(EmpresaRequest body)
        {
            return Crear4Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CrearResponse> Crear4Async(EmpresaRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Empresa/Crear");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrearResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActualizarResponse> Actualizar4Async(int idEmpresa, EmpresaRequest body)
        {
            return Actualizar4Async(idEmpresa, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActualizarResponse> Actualizar4Async(int idEmpresa, EmpresaRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (idEmpresa == null)
                throw new System.ArgumentNullException("idEmpresa");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Empresa/Actualizar/{idEmpresa}");
            urlBuilder_.Replace("{idEmpresa}", System.Uri.EscapeDataString(ConvertToString(idEmpresa, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActualizarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EliminarResponse> Eliminar4Async(int idEmpresa)
        {
            return Eliminar4Async(idEmpresa, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EliminarResponse> Eliminar4Async(int idEmpresa, System.Threading.CancellationToken cancellationToken)
        {
            if (idEmpresa == null)
                throw new System.ArgumentNullException("idEmpresa");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Empresa/Eliminar/{idEmpresa}");
            urlBuilder_.Replace("{idEmpresa}", System.Uri.EscapeDataString(ConvertToString(idEmpresa, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EliminarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EmpresaResponse> Obtener5Async(int idEmpresa)
        {
            return Obtener5Async(idEmpresa, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EmpresaResponse> Obtener5Async(int idEmpresa, System.Threading.CancellationToken cancellationToken)
        {
            if (idEmpresa == null)
                throw new System.ArgumentNullException("idEmpresa");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Empresa/Obtener/{idEmpresa}");
            urlBuilder_.Replace("{idEmpresa}", System.Uri.EscapeDataString(ConvertToString(idEmpresa, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EmpresaResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EmpresaResponse>> Listar4Async()
        {
            return Listar4Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EmpresaResponse>> Listar4Async(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Empresa/Listar");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EmpresaResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CrearResponse> Crear5Async(FacturaRequest body)
        {
            return Crear5Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CrearResponse> Crear5Async(FacturaRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Factura/Crear");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrearResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActualizarResponse> Actualizar5Async(int? idFactura, string idUnidadesCatalogoColor, FacturaRequest body)
        {
            return Actualizar5Async(idFactura, idUnidadesCatalogoColor, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActualizarResponse> Actualizar5Async(int? idFactura, string idUnidadesCatalogoColor, FacturaRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (idUnidadesCatalogoColor == null)
                throw new System.ArgumentNullException("idUnidadesCatalogoColor");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Factura/Actualizar/{idUnidadesCatalogoColor}?");
            urlBuilder_.Replace("{idUnidadesCatalogoColor}", System.Uri.EscapeDataString(ConvertToString(idUnidadesCatalogoColor, System.Globalization.CultureInfo.InvariantCulture)));
            if (idFactura != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idFactura") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idFactura, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActualizarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EliminarResponse> Eliminar5Async(int idFactura)
        {
            return Eliminar5Async(idFactura, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EliminarResponse> Eliminar5Async(int idFactura, System.Threading.CancellationToken cancellationToken)
        {
            if (idFactura == null)
                throw new System.ArgumentNullException("idFactura");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Factura/Eliminar/{idFactura}");
            urlBuilder_.Replace("{idFactura}", System.Uri.EscapeDataString(ConvertToString(idFactura, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EliminarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FacturaResponse> Obtener6Async(int idFactura)
        {
            return Obtener6Async(idFactura, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FacturaResponse> Obtener6Async(int idFactura, System.Threading.CancellationToken cancellationToken)
        {
            if (idFactura == null)
                throw new System.ArgumentNullException("idFactura");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Factura/Obtener/{idFactura}");
            urlBuilder_.Replace("{idFactura}", System.Uri.EscapeDataString(ConvertToString(idFactura, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FacturaResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FacturaResponse>> Listar5Async()
        {
            return Listar5Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FacturaResponse>> Listar5Async(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Factura/Listar");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<FacturaResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CrearResponse> Crear6Async(CrearOrdenRequest body)
        {
            return Crear6Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CrearResponse> Crear6Async(CrearOrdenRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Orden/Crear");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrearResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActualizarResponse> Actualizar6Async(int idServicioOrdenes, ActualizarOrdenRequest body)
        {
            return Actualizar6Async(idServicioOrdenes, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActualizarResponse> Actualizar6Async(int idServicioOrdenes, ActualizarOrdenRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (idServicioOrdenes == null)
                throw new System.ArgumentNullException("idServicioOrdenes");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Orden/Actualizar/{idServicioOrdenes}");
            urlBuilder_.Replace("{idServicioOrdenes}", System.Uri.EscapeDataString(ConvertToString(idServicioOrdenes, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActualizarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EliminarResponse> Eliminar6Async(int idServicioOrdenes)
        {
            return Eliminar6Async(idServicioOrdenes, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EliminarResponse> Eliminar6Async(int idServicioOrdenes, System.Threading.CancellationToken cancellationToken)
        {
            if (idServicioOrdenes == null)
                throw new System.ArgumentNullException("idServicioOrdenes");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Orden/Eliminar/{idServicioOrdenes}");
            urlBuilder_.Replace("{idServicioOrdenes}", System.Uri.EscapeDataString(ConvertToString(idServicioOrdenes, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EliminarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OrdenResponse> Obtener7Async(int idServicioOrdenes)
        {
            return Obtener7Async(idServicioOrdenes, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrdenResponse> Obtener7Async(int idServicioOrdenes, System.Threading.CancellationToken cancellationToken)
        {
            if (idServicioOrdenes == null)
                throw new System.ArgumentNullException("idServicioOrdenes");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Orden/Obtener/{idServicioOrdenes}");
            urlBuilder_.Replace("{idServicioOrdenes}", System.Uri.EscapeDataString(ConvertToString(idServicioOrdenes, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrdenResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrdenResponse>> Listar6Async()
        {
            return Listar6Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrdenResponse>> Listar6Async(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Orden/Listar");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OrdenResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<InfoOrdenDtoConfirmaSincronizacionResponse> Sincronizar3Async(System.Collections.Generic.IEnumerable<OrdenViewModel> body)
        {
            return Sincronizar3Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InfoOrdenDtoConfirmaSincronizacionResponse> Sincronizar3Async(System.Collections.Generic.IEnumerable<OrdenViewModel> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Orden/Sincronizar");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InfoOrdenDtoConfirmaSincronizacionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CrearResponse> Crear7Async(int idServicioOrdenes, CrearOrdenDetalleRequest body)
        {
            return Crear7Async(idServicioOrdenes, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CrearResponse> Crear7Async(int idServicioOrdenes, CrearOrdenDetalleRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (idServicioOrdenes == null)
                throw new System.ArgumentNullException("idServicioOrdenes");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/OrdenDetalle/Crear/{idServicioOrdenes}");
            urlBuilder_.Replace("{idServicioOrdenes}", System.Uri.EscapeDataString(ConvertToString(idServicioOrdenes, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrearResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActualizarResponse> Actualizar7Async(int idServicioOrdenes, int consec, ActualizarOrdenDetalleRequest body)
        {
            return Actualizar7Async(idServicioOrdenes, consec, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActualizarResponse> Actualizar7Async(int idServicioOrdenes, int consec, ActualizarOrdenDetalleRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (idServicioOrdenes == null)
                throw new System.ArgumentNullException("idServicioOrdenes");

            if (consec == null)
                throw new System.ArgumentNullException("consec");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/OrdenDetalle/Actualizar/{idServicioOrdenes}/{consec}");
            urlBuilder_.Replace("{idServicioOrdenes}", System.Uri.EscapeDataString(ConvertToString(idServicioOrdenes, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{consec}", System.Uri.EscapeDataString(ConvertToString(consec, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActualizarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EliminarResponse> Eliminar7Async(int idServicioOrdenes, int consec)
        {
            return Eliminar7Async(idServicioOrdenes, consec, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EliminarResponse> Eliminar7Async(int idServicioOrdenes, int consec, System.Threading.CancellationToken cancellationToken)
        {
            if (idServicioOrdenes == null)
                throw new System.ArgumentNullException("idServicioOrdenes");

            if (consec == null)
                throw new System.ArgumentNullException("consec");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/OrdenDetalle/Eliminar/{idServicioOrdenes}/{consec}");
            urlBuilder_.Replace("{idServicioOrdenes}", System.Uri.EscapeDataString(ConvertToString(idServicioOrdenes, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{consec}", System.Uri.EscapeDataString(ConvertToString(consec, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EliminarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OrdenResponse> Obtener8Async(int idServicioOrdenes, int consec)
        {
            return Obtener8Async(idServicioOrdenes, consec, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrdenResponse> Obtener8Async(int idServicioOrdenes, int consec, System.Threading.CancellationToken cancellationToken)
        {
            if (idServicioOrdenes == null)
                throw new System.ArgumentNullException("idServicioOrdenes");

            if (consec == null)
                throw new System.ArgumentNullException("consec");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/OrdenDetalle/Obtener/{idServicioOrdenes}/{consec}");
            urlBuilder_.Replace("{idServicioOrdenes}", System.Uri.EscapeDataString(ConvertToString(idServicioOrdenes, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{consec}", System.Uri.EscapeDataString(ConvertToString(consec, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrdenResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrdenDetalleResponse>> Listar7Async(int idServicioOrdenes)
        {
            return Listar7Async(idServicioOrdenes, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrdenDetalleResponse>> Listar7Async(int idServicioOrdenes, System.Threading.CancellationToken cancellationToken)
        {
            if (idServicioOrdenes == null)
                throw new System.ArgumentNullException("idServicioOrdenes");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/OrdenDetalle/Listar/{idServicioOrdenes}");
            urlBuilder_.Replace("{idServicioOrdenes}", System.Uri.EscapeDataString(ConvertToString(idServicioOrdenes, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OrdenDetalleResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CrearResponse> Crear8Async(CrearPaqueteRequest body)
        {
            return Crear8Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CrearResponse> Crear8Async(CrearPaqueteRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Paquetes/Crear");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrearResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActualizarResponse> Actualizar8Async(int idPaquete, ActualizarPaqueteRequest body)
        {
            return Actualizar8Async(idPaquete, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActualizarResponse> Actualizar8Async(int idPaquete, ActualizarPaqueteRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (idPaquete == null)
                throw new System.ArgumentNullException("idPaquete");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Paquetes/Actualizar/{idPaquete}");
            urlBuilder_.Replace("{idPaquete}", System.Uri.EscapeDataString(ConvertToString(idPaquete, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActualizarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EliminarResponse> Eliminar8Async(int idPaquete)
        {
            return Eliminar8Async(idPaquete, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EliminarResponse> Eliminar8Async(int idPaquete, System.Threading.CancellationToken cancellationToken)
        {
            if (idPaquete == null)
                throw new System.ArgumentNullException("idPaquete");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Paquetes/Eliminar/{idPaquete}");
            urlBuilder_.Replace("{idPaquete}", System.Uri.EscapeDataString(ConvertToString(idPaquete, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EliminarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PaqueteResponse> Obtener9Async(int idPaquete)
        {
            return Obtener9Async(idPaquete, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaqueteResponse> Obtener9Async(int idPaquete, System.Threading.CancellationToken cancellationToken)
        {
            if (idPaquete == null)
                throw new System.ArgumentNullException("idPaquete");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Paquetes/Obtener/{idPaquete}");
            urlBuilder_.Replace("{idPaquete}", System.Uri.EscapeDataString(ConvertToString(idPaquete, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaqueteResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PaqueteResponse>> Listar8Async()
        {
            return Listar8Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PaqueteResponse>> Listar8Async(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Paquetes/Listar");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PaqueteResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CrearResponse> Crear9Async(PersonaRequest body)
        {
            return Crear9Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CrearResponse> Crear9Async(PersonaRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Persona/Crear");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrearResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PersonaResponse> Actualizar9Async(int idPersona, SucursalRequest body)
        {
            return Actualizar9Async(idPersona, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PersonaResponse> Actualizar9Async(int idPersona, SucursalRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (idPersona == null)
                throw new System.ArgumentNullException("idPersona");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Persona/Actualizar/{idPersona}");
            urlBuilder_.Replace("{idPersona}", System.Uri.EscapeDataString(ConvertToString(idPersona, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PersonaResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CrearResponse> Crear10Async(SucursalRequest body)
        {
            return Crear10Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CrearResponse> Crear10Async(SucursalRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Sucursal/Crear");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrearResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActualizarResponse> Actualizar10Async(int idSucursal, SucursalRequest body)
        {
            return Actualizar10Async(idSucursal, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActualizarResponse> Actualizar10Async(int idSucursal, SucursalRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (idSucursal == null)
                throw new System.ArgumentNullException("idSucursal");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Sucursal/Actualizar/{idSucursal}");
            urlBuilder_.Replace("{idSucursal}", System.Uri.EscapeDataString(ConvertToString(idSucursal, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActualizarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EliminarResponse> Eliminar9Async(int idSucursal)
        {
            return Eliminar9Async(idSucursal, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EliminarResponse> Eliminar9Async(int idSucursal, System.Threading.CancellationToken cancellationToken)
        {
            if (idSucursal == null)
                throw new System.ArgumentNullException("idSucursal");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Sucursal/Eliminar/{idSucursal}");
            urlBuilder_.Replace("{idSucursal}", System.Uri.EscapeDataString(ConvertToString(idSucursal, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EliminarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SucursalResponse> Obtener10Async(int idSucursal)
        {
            return Obtener10Async(idSucursal, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SucursalResponse> Obtener10Async(int idSucursal, System.Threading.CancellationToken cancellationToken)
        {
            if (idSucursal == null)
                throw new System.ArgumentNullException("idSucursal");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Sucursal/Obtener/{idSucursal}");
            urlBuilder_.Replace("{idSucursal}", System.Uri.EscapeDataString(ConvertToString(idSucursal, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SucursalResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SucursalResponse>> Listar9Async()
        {
            return Listar9Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SucursalResponse>> Listar9Async(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Sucursal/Listar");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SucursalResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CrearUnidadResponse> Crear11Async(CrearUnidadRequest body)
        {
            return Crear11Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CrearUnidadResponse> Crear11Async(CrearUnidadRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Unidades/Crear");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrearUnidadResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Sincronizar4Async()
        {
            return Sincronizar4Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Sincronizar4Async(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Unidades/Sincronizar");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CrearResponse> Crear12Async(UnidadColorRequest body)
        {
            return Crear12Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CrearResponse> Crear12Async(UnidadColorRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/UnidadesColor/Crear");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrearResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActualizarResponse> Actualizar11Async(int idUnidadesCatalogoColor, UnidadColorRequest body)
        {
            return Actualizar11Async(idUnidadesCatalogoColor, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActualizarResponse> Actualizar11Async(int idUnidadesCatalogoColor, UnidadColorRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (idUnidadesCatalogoColor == null)
                throw new System.ArgumentNullException("idUnidadesCatalogoColor");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/UnidadesColor/Actualizar/{idUnidadesCatalogoColor}");
            urlBuilder_.Replace("{idUnidadesCatalogoColor}", System.Uri.EscapeDataString(ConvertToString(idUnidadesCatalogoColor, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActualizarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EliminarResponse> Eliminar10Async(int idUnidadesCatalogoColor)
        {
            return Eliminar10Async(idUnidadesCatalogoColor, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EliminarResponse> Eliminar10Async(int idUnidadesCatalogoColor, System.Threading.CancellationToken cancellationToken)
        {
            if (idUnidadesCatalogoColor == null)
                throw new System.ArgumentNullException("idUnidadesCatalogoColor");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/UnidadesColor/Eliminar/{idUnidadesCatalogoColor}");
            urlBuilder_.Replace("{idUnidadesCatalogoColor}", System.Uri.EscapeDataString(ConvertToString(idUnidadesCatalogoColor, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EliminarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UnidadColorResponse> Obtener11Async(int idUnidadesCatalogoColor)
        {
            return Obtener11Async(idUnidadesCatalogoColor, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UnidadColorResponse> Obtener11Async(int idUnidadesCatalogoColor, System.Threading.CancellationToken cancellationToken)
        {
            if (idUnidadesCatalogoColor == null)
                throw new System.ArgumentNullException("idUnidadesCatalogoColor");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/UnidadesColor/Obtener/{idUnidadesCatalogoColor}");
            urlBuilder_.Replace("{idUnidadesCatalogoColor}", System.Uri.EscapeDataString(ConvertToString(idUnidadesCatalogoColor, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UnidadColorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UnidadColorResponse>> Listar10Async()
        {
            return Listar10Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UnidadColorResponse>> Listar10Async(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/UnidadesColor/Listar");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UnidadColorResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UsuarioResponse> Obtener12Async(int idUsuario)
        {
            return Obtener12Async(idUsuario, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UsuarioResponse> Obtener12Async(int idUsuario, System.Threading.CancellationToken cancellationToken)
        {
            if (idUsuario == null)
                throw new System.ArgumentNullException("idUsuario");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Usuario/Obtener/{idUsuario}");
            urlBuilder_.Replace("{idUsuario}", System.Uri.EscapeDataString(ConvertToString(idUsuario, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UsuarioResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UsuarioResponse>> Listar11Async()
        {
            return Listar11Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UsuarioResponse>> Listar11Async(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Usuario/Listar");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UsuarioResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CrearResponse> Crear13Async(CrearVehiculoRequest body)
        {
            return Crear13Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CrearResponse> Crear13Async(CrearVehiculoRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Vehiculo/Crear");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrearResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActualizarResponse> Actualizar12Async(int idVehiculo, ActualizarVehiculoRequest body)
        {
            return Actualizar12Async(idVehiculo, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActualizarResponse> Actualizar12Async(int idVehiculo, ActualizarVehiculoRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (idVehiculo == null)
                throw new System.ArgumentNullException("idVehiculo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Vehiculo/Actualizar/{idVehiculo}");
            urlBuilder_.Replace("{idVehiculo}", System.Uri.EscapeDataString(ConvertToString(idVehiculo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActualizarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EliminarResponse> Eliminar11Async(int idVehiculo)
        {
            return Eliminar11Async(idVehiculo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EliminarResponse> Eliminar11Async(int idVehiculo, System.Threading.CancellationToken cancellationToken)
        {
            if (idVehiculo == null)
                throw new System.ArgumentNullException("idVehiculo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Vehiculo/Eliminar/{idVehiculo}");
            urlBuilder_.Replace("{idVehiculo}", System.Uri.EscapeDataString(ConvertToString(idVehiculo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EliminarResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FacturaResponse> Obtener13Async(int idVehiculo)
        {
            return Obtener13Async(idVehiculo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FacturaResponse> Obtener13Async(int idVehiculo, System.Threading.CancellationToken cancellationToken)
        {
            if (idVehiculo == null)
                throw new System.ArgumentNullException("idVehiculo");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Vehiculo/Obtener/{idVehiculo}");
            urlBuilder_.Replace("{idVehiculo}", System.Uri.EscapeDataString(ConvertToString(idVehiculo, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FacturaResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VehiculoResponse>> Listar12Async()
        {
            return Listar12Async(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VehiculoResponse>> Listar12Async(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v1/Vehiculo/Listar");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<VehiculoResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrmApiError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<CrmApiError>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class AccionesCampoDetalleRequest
    {
        /// <summary>
        /// Clave de identificación del elemento que integra la acción de campo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEClasificacion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CEClasificacion { get; set; }

        /// <summary>
        /// Descricpción del Elemento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Descripcion { get; set; }

        /// <summary>
        /// Tiempo a ser considerado cuando se trata de mano de obra
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tiempo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Tiempo { get; set; }

        /// <summary>
        /// Cantidad de partes a ser considerada cuando se trata de partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cantidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Cantidad { get; set; }

        /// <summary>
        /// Clave de identificación de la partes a ser considerada, cuando se trata de partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idParte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdParte { get; set; }

        /// <summary>
        /// Clave de la operación de acuerdo a la campaña
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveOperacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CveOperacion { get; set; }

        /// <summary>
        /// Manera de cobro y pago al técnico (Especialización del técnico y solo para la mano de obra)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nivel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Nivel { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class AccionesCampoSeriesRequest
    {
        /// <summary>
        /// Seríe de identificación del vehículo a ser considerado dentro de la acción de campo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serie", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Serie { get; set; }

        /// <summary>
        /// Origen del registro 0 - Propio 1 - De otro distribuidor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("origen", Required = Newtonsoft.Json.Required.Always)]
        public int Origen { get; set; }

        /// <summary>
        /// Bandera que indica si el registro ya está realizado o no. 0 - Pendiente 1 - Realizado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bRealizado", Required = Newtonsoft.Json.Required.Always)]
        public int BRealizado { get; set; }

        /// <summary>
        /// Fecha de realización de la acción
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaRealizacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaRealizacion { get; set; }

        /// <summary>
        /// Clave de identificación del distribuidor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEDistribuidor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEDistribuidor { get; set; }

        /// <summary>
        /// Clave de identificación del usuario que realiza la última actualización  del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usuarioActualiza", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UsuarioActualiza { get; set; }

        /// <summary>
        /// Observaciones del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CrearAccionesCampoRequest
    {
        /// <summary>
        /// Clave unica de la accion de campo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveAccionesCampo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CveAccionesCampo { get; set; }

        /// <summary>
        /// Nombre de la accion de campo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nombreAccionesCampo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NombreAccionesCampo { get; set; }

        /// <summary>
        /// Identificador de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdEmpresa { get; set; }

        /// <summary>
        /// Identificador de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idSucursal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdSucursal { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de campaña
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoCampana", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CETipoCampana { get; set; }

        /// <summary>
        /// Fecha inicial de la vigencia de la acción de campo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaInicio", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaInicio { get; set; }

        /// <summary>
        /// Fecha final de la vigencia de la acción de campo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaTermino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaTermino { get; set; }

        /// <summary>
        /// Nombre del responsable que genera la acción de campo (Planta)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nombreResponsable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NombreResponsable { get; set; }

        /// <summary>
        /// Kilometraje límite para ser considerado un atomovil dentro de la acción de campo (campaña)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kilometrajeLimite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? KilometrajeLimite { get; set; }

        /// <summary>
        /// Lista de acciones de campo detalle
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detalles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccionesCampoDetalleRequest> Detalles { get; set; }

        /// <summary>
        /// Lista de los número se serie de los autos a los que se les deberá de aplicar las acciones de correccion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("series", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AccionesCampoSeriesRequest> Series { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CrearResponse
    {
        /// <summary>
        /// Identificador
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// Fecha de alta
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaAlta { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CrmApiError
    {
        [Newtonsoft.Json.JsonProperty("codigo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Codigo { get; set; }

        [Newtonsoft.Json.JsonProperty("mensaje", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mensaje { get; set; }

        [Newtonsoft.Json.JsonProperty("trace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Trace { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ActualizarAccionesCampoRequest
    {
        /// <summary>
        /// Clave unica de la accion de campo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveAccionesCampo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CveAccionesCampo { get; set; }

        /// <summary>
        /// Nombre de la accion de campo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nombreAccionesCampo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NombreAccionesCampo { get; set; }

        /// <summary>
        /// Identificador de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdEmpresa { get; set; }

        /// <summary>
        /// Identificador de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idSucursal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdSucursal { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de campaña
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoCampana", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CETipoCampana { get; set; }

        /// <summary>
        /// Fecha inicial de la vigencia de la acción de campo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaInicio", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaInicio { get; set; }

        /// <summary>
        /// Fecha final de la vigencia de la acción de campo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaTermino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaTermino { get; set; }

        /// <summary>
        /// Nombre del responsable que genera la acción de campo (Planta)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nombreResponsable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NombreResponsable { get; set; }

        /// <summary>
        /// Kilometraje límite para ser considerado un atomovil dentro de la acción de campo (campaña)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kilometrajeLimite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? KilometrajeLimite { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ActualizarResponse
    {
        /// <summary>
        /// Identificador
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// Fecha de modificacion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaModifica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaModifica { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class EliminarResponse
    {
        /// <summary>
        /// Identificador
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// Fecha de modificacion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaModifica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaModifica { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class AccionesCampoResponse
    {
        /// <summary>
        /// Identificador de la accion de campo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idAccionesCampo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdAccionesCampo { get; set; }

        /// <summary>
        /// Clave unica de la accion de campo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveAccionesCampo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CveAccionesCampo { get; set; }

        /// <summary>
        /// Nombre de la accion de campo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nombreAccionesCampo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NombreAccionesCampo { get; set; }

        /// <summary>
        /// Identificador de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdEmpresa { get; set; }

        /// <summary>
        /// Identificador de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idSucursal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdSucursal { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de campaña
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoCampana", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CETipoCampana { get; set; }

        /// <summary>
        /// Fecha inicial de la vigencia de la acción de campo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaInicio", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaInicio { get; set; }

        /// <summary>
        /// Fecha final de la vigencia de la acción de campo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaTermino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaTermino { get; set; }

        /// <summary>
        /// Nombre del responsable que genera la acción de campo (Planta)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nombreResponsable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NombreResponsable { get; set; }

        /// <summary>
        /// Kilometraje límite para ser considerado un atomovil dentro de la acción de campo (campaña)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kilometrajeLimite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? KilometrajeLimite { get; set; }

        /// <summary>
        /// Fecha de alta de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaAlta { get; set; }

        /// <summary>
        /// Estado de la empresa. 1=Activo, 0=Inactivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Estatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ProblemDetails
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class AccionesCampoDetalleResponse
    {
        /// <summary>
        /// Identificador de la acción de campo detalle
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idAccionesCampoDetalle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdAccionesCampoDetalle { get; set; }

        /// <summary>
        /// Identificador de la acción de campo a ser aplicada (Campaña de Recall)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idAccionesCampo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdAccionesCampo { get; set; }

        /// <summary>
        /// Clave de identificación del elemento que integra la acción de campo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEClasificacion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CEClasificacion { get; set; }

        /// <summary>
        /// Descricpción del Elemento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Descripcion { get; set; }

        /// <summary>
        /// Tiempo a ser considerado cuando se trata de mano de obra
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tiempo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Tiempo { get; set; }

        /// <summary>
        /// Cantidad de partes a ser considerada cuando se trata de partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cantidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Cantidad { get; set; }

        /// <summary>
        /// Clave de identificación de la partes a ser considerada, cuando se trata de partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idParte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdParte { get; set; }

        /// <summary>
        /// Clave de la operación de acuerdo a la campaña
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveOperacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CveOperacion { get; set; }

        /// <summary>
        /// Manera de cobro y pago al técnico (Especialización del técnico y solo para la mano de obra)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nivel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Nivel { get; set; }

        /// <summary>
        /// Fecha de alta de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaAlta { get; set; }

        /// <summary>
        /// Estado de la empresa. 1=Activo, 0=Inactivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Estatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CitaPaquetePartesRequest
    {
        /// <summary>
        /// Clave de identificación de la partes a ser considerada, cuando se trata de partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idParte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdParte { get; set; }

        /// <summary>
        /// Cantidad de partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cantidadPartes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CantidadPartes { get; set; }

        /// <summary>
        /// Tipo de precio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoPrecio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TipoPrecio { get; set; }

        /// <summary>
        /// Precio unitario
        /// </summary>
        [Newtonsoft.Json.JsonProperty("precioUnitario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PrecioUnitario { get; set; }

        /// <summary>
        /// Costo unitario estimado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ctoUnitEst", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CtoUnitEst { get; set; }

        /// <summary>
        /// Cantidad de partes apartadas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apartado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Apartado { get; set; }

        /// <summary>
        /// Cantidad de partes disponibles
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disponible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Disponible { get; set; }

        /// <summary>
        /// Cantidad de partes a solicitar
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cantidadSolicitar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CantidadSolicitar { get; set; }

        /// <summary>
        /// Fecha de surtido
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaSurtido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaSurtido { get; set; }

        /// <summary>
        /// Fecha de apartado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaApartado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaApartado { get; set; }

        /// <summary>
        /// Estatus del seguimiento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estatusSeguimiento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EstatusSeguimiento { get; set; }

        /// <summary>
        /// Clave de identificación del pedido especial
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPedidoEspecial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdPedidoEspecial { get; set; }

        /// <summary>
        /// Fecha del pedido especial
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaPedidoEspecial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaPedidoEspecial { get; set; }

        /// <summary>
        /// Fecha de promesa de surtido
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaPromesaSurtido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaPromesaSurtido { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CitaPaqueteOperacionesRequest
    {
        /// <summary>
        /// Clave de identificación de la mano de obra que integra el paquete de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPaqueteMO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdPaqueteMO { get; set; }

        /// <summary>
        /// Clave de la operación de acuerdo a la campaña
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveOperacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CveOperacion { get; set; }

        /// <summary>
        /// Descripción del servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

        /// <summary>
        /// Clave de Tipo de Movimiento 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoMO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CETipoMO { get; set; }

        /// <summary>
        /// Nivel del trabajador del cual depende el precio de la mano de obra, depende de Bpro 1 -2 - 3
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nivelMO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NivelMO { get; set; }

        /// <summary>
        /// Unidades de tiempo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unidadesTiempo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnidadesTiempo { get; set; }

        /// <summary>
        /// Precio de venta
        /// </summary>
        [Newtonsoft.Json.JsonProperty("precioVenta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PrecioVenta { get; set; }

        /// <summary>
        /// Costo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("costo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Costo { get; set; }

        /// <summary>
        /// Código exclusivo para FORD
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoEreact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoEreact { get; set; }

        /// <summary>
        /// Código exclusivo para FORD
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repTiempo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RepTiempo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CitaPaqueteRequest
    {
        /// <summary>
        /// Clave de identificación del paquete para cada cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPaqueteServ", Required = Newtonsoft.Json.Required.Always)]
        public int IdPaqueteServ { get; set; }

        /// <summary>
        /// Clave de identificación de la orden
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEOrden { get; set; }

        /// <summary>
        /// Valor predeterminado = 2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tipo { get; set; }

        /// <summary>
        /// Observaciones del paquete asignado para la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("partes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CitaPaquetePartesRequest> Partes { get; set; }

        [Newtonsoft.Json.JsonProperty("operaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CitaPaqueteOperacionesRequest> Operaciones { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CitaAccionCampoDetalleRequest
    {
        /// <summary>
        /// Clave de identificación del detalle de la orden
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idAccionesCampoDetalle", Required = Newtonsoft.Json.Required.Always)]
        public int IdAccionesCampoDetalle { get; set; }

        /// <summary>
        /// Clave de identificación del elemento que integra la acción de campo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEClasificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEClasificacion { get; set; }

        /// <summary>
        /// Descricpción del Elemento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

        /// <summary>
        /// Tiempo a ser considerado cuando se trata de mano de obra
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tiempo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Tiempo { get; set; }

        /// <summary>
        /// Cantidad de partes a ser considerada cuando se trata de partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cantidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Cantidad { get; set; }

        /// <summary>
        /// Clave de identificación de la partes a ser considerada, cuando se trata de partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idParte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdParte { get; set; }

        /// <summary>
        /// Clave de la operación de acuerdo a la campaña
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveOperacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CveOperacion { get; set; }

        /// <summary>
        /// Manera de cobro y pago al técnico (Especialización del técnico y solo para la mano de obra)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nivel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Nivel { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CitaAccionCampoRequest
    {
        /// <summary>
        /// Clave de identificación de la orden
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idAccionesCampo", Required = Newtonsoft.Json.Required.Always)]
        public int IdAccionesCampo { get; set; }

        /// <summary>
        /// Clave de identificación de la orden
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEOrden { get; set; }

        [Newtonsoft.Json.JsonProperty("detalles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CitaAccionCampoDetalleRequest> Detalles { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CrearCitaRequest
    {
        /// <summary>
        /// Clave externa de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveCitaExterna", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CveCitaExterna { get; set; }

        /// <summary>
        /// Clave de identificación del asesor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEAsesor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CEAsesor { get; set; }

        /// <summary>
        /// Clave de identificación del estatus de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEEstatusCita", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CEEstatusCita { get; set; }

        /// <summary>
        /// Hora planeada de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaCita", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaCita { get; set; }

        /// <summary>
        /// Hora planeada de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("horaCita", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string HoraCita { get; set; }

        /// <summary>
        /// Fecha real de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaCitaReal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaCitaReal { get; set; }

        /// <summary>
        /// Hora real de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("horaCitaReal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HoraCitaReal { get; set; }

        /// <summary>
        /// Fecha de entrega de la unidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaEntrega { get; set; }

        /// <summary>
        /// Hora de entrega de la unidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("horaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HoraEntrega { get; set; }

        /// <summary>
        /// Observaciones del servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        /// <summary>
        /// Clave de identificación de la persona a la que se le genera la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_idpersona", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Per_idpersona { get; set; }

        /// <summary>
        /// Año del modelo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("anModelo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AnModelo { get; set; }

        /// <summary>
        /// Clave de identificacion del vehiculo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idUnidadesCatalogo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdUnidadesCatalogo { get; set; }

        /// <summary>
        /// Numero de placas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("placas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Placas { get; set; }

        /// <summary>
        /// Clave de usuario
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveUsuario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CveUsuario { get; set; }

        /// <summary>
        /// Numero de la orden
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdOrden { get; set; }

        /// <summary>
        /// Numero de serie
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroSerie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumeroSerie { get; set; }

        /// <summary>
        /// Clave de identificación de la persona propietaria del vehiculo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propietario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Propietario { get; set; }

        /// <summary>
        /// Clave de identificación de la persona contacto
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contacto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Contacto { get; set; }

        /// <summary>
        /// Clave de identificación de la persona conductor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conductor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Conductor { get; set; }

        /// <summary>
        /// Clave de identificación del asesor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEMarca", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEMarca { get; set; }

        /// <summary>
        /// Kilometraje de la unidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kilometraje", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kilometraje { get; set; }

        /// <summary>
        /// Motivo del servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mortivoServicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MortivoServicio { get; set; }

        /// <summary>
        /// Clave de identificación del color exterior
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEColorExterior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEColorExterior { get; set; }

        /// <summary>
        /// Clave de identificación del color interior
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEColorInterior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEColorInterior { get; set; }

        /// <summary>
        /// Bandera que indica si la cita fue reprogramada
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bServicioCitaRepro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BServicioCitaRepro { get; set; }

        /// <summary>
        /// Clave de la identificación de la cita por la cual fue reprogramada
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idServicioCitaRepro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdServicioCitaRepro { get; set; }

        /// <summary>
        /// Bandera que indica si la cita fue confirmada
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bConfirmacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BConfirmacion { get; set; }

        /// <summary>
        /// Fecha de entrega real para Toyota a partir de la cual se entrega la unidad nueva al cliente
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaDOFU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaDOFU { get; set; }

        /// <summary>
        /// Clave de identificación del documento de interfaces
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idDocInterf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdDocInterf { get; set; }

        /// <summary>
        /// Bandera que indica si es servivio express
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bServicioExpress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BServicioExpress { get; set; }

        /// <summary>
        /// Descripción de la interfaz de origen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interfazOrigen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterfazOrigen { get; set; }

        /// <summary>
        /// Observaciones externas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("obsExternas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObsExternas { get; set; }

        /// <summary>
        /// Medio de transporte solicitado por el cliente una vez que entrega la unidad al servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("medioTransporte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MedioTransporte { get; set; }

        /// <summary>
        /// Clave de identificación de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdEmpresa { get; set; }

        /// <summary>
        /// Clave de identificación de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idSucursal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdSucursal { get; set; }

        /// <summary>
        /// Clave de identificación del responsable del mantenimiento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("responsableMtto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ResponsableMtto { get; set; }

        [Newtonsoft.Json.JsonProperty("paquetes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CitaPaqueteRequest> Paquetes { get; set; }

        [Newtonsoft.Json.JsonProperty("accionesCampo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CitaAccionCampoRequest> AccionesCampo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ActualizarCitaRequest
    {
        /// <summary>
        /// Clave externa de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveCitaExterna", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CveCitaExterna { get; set; }

        /// <summary>
        /// Clave de identificación del asesor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEAsesor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CEAsesor { get; set; }

        /// <summary>
        /// Clave de identificación del estatus de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEEstatusCita", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CEEstatusCita { get; set; }

        /// <summary>
        /// Hora planeada de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaCita", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaCita { get; set; }

        /// <summary>
        /// Hora planeada de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("horaCita", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string HoraCita { get; set; }

        /// <summary>
        /// Fecha real de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaCitaReal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaCitaReal { get; set; }

        /// <summary>
        /// Hora real de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("horaCitaReal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HoraCitaReal { get; set; }

        /// <summary>
        /// Fecha de entrega de la unidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaEntrega { get; set; }

        /// <summary>
        /// Hora de entrega de la unidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("horaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HoraEntrega { get; set; }

        /// <summary>
        /// Observaciones del servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        /// <summary>
        /// Clave de identificación de la persona a la que se le genera la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_idpersona", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Per_idpersona { get; set; }

        /// <summary>
        /// Estado de la empresa. true=Activo, false=Inactivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estatus", Required = Newtonsoft.Json.Required.Always)]
        public bool Estatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CitaResponse
    {
        /// <summary>
        /// Identificador de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idServicioCita", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdServicioCita { get; set; }

        /// <summary>
        /// Clave externa de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveCitaExterna", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CveCitaExterna { get; set; }

        /// <summary>
        /// Clave de identificación del asesor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEAsesor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CEAsesor { get; set; }

        /// <summary>
        /// Clave de identificación del estatus de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEEstatusCita", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CEEstatusCita { get; set; }

        /// <summary>
        /// Hora planeada de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaCita", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaCita { get; set; }

        /// <summary>
        /// Hora planeada de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("horaCita", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string HoraCita { get; set; }

        /// <summary>
        /// Fecha real de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaCitaReal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaCitaReal { get; set; }

        /// <summary>
        /// Hora real de la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("horaCitaReal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HoraCitaReal { get; set; }

        /// <summary>
        /// Fecha de entrega de la unidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaEntrega { get; set; }

        /// <summary>
        /// Hora de entrega de la unidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("horaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HoraEntrega { get; set; }

        /// <summary>
        /// Observaciones del servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        /// <summary>
        /// Clave de identificación de la persona a la que se le genera la cita
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_idpersona", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Per_idpersona { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class EmpresaRequest
    {
        /// <summary>
        /// Nombre de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nombreEmpresa", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NombreEmpresa { get; set; }

        /// <summary>
        /// Clave unica de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveEmpresa", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CveEmpresa { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class EmpresaResponse
    {
        /// <summary>
        /// Identificador de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdEmpresa { get; set; }

        /// <summary>
        /// Nombre de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nombreEmpresa", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NombreEmpresa { get; set; }

        /// <summary>
        /// Clave unica de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveEmpresa", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CveEmpresa { get; set; }

        /// <summary>
        /// Fecha de alta de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaAlta { get; set; }

        /// <summary>
        /// Fecha de modificacion de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaModifica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaModifica { get; set; }

        /// <summary>
        /// Estado de la empresa. 1=Activo, 0=Inactivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Estatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class FacturaRequest
    {
        /// <summary>
        /// Clave de identificación del tipo de documento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoDocumento", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CETipoDocumento { get; set; }

        /// <summary>
        /// Folio de la factura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("folioDocumento", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FolioDocumento { get; set; }

        /// <summary>
        /// Clave de ila persona que es  el cliente al que se le genera la factura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clienteFactura", Required = Newtonsoft.Json.Required.Always)]
        public int ClienteFactura { get; set; }

        /// <summary>
        /// Fecha y hora de la generación de la factura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraDocumento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraDocumento { get; set; }

        /// <summary>
        /// Clave de identificación del estatus de la factura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEEstatusDocumento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEEstatusDocumento { get; set; }

        /// <summary>
        /// Número del pedido
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPedido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdPedido { get; set; }

        /// <summary>
        /// Número del pedido de la partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPedidoPartes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdPedidoPartes { get; set; }

        /// <summary>
        /// Clave de identificación de la forma de pago de la factura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEFormaPago", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEFormaPago { get; set; }

        /// <summary>
        /// Monto de descuento, si es que este aplica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("montoDescuento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MontoDescuento { get; set; }

        /// <summary>
        /// Monto de la venta bruta
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ventaBruta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VentaBruta { get; set; }

        /// <summary>
        /// Monto del IVA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("montoIVA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MontoIVA { get; set; }

        /// <summary>
        /// Monto de la venta total
        /// </summary>
        [Newtonsoft.Json.JsonProperty("montoTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MontoTotal { get; set; }

        /// <summary>
        /// Bandera que indica si se tiene el IVA desglosado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bIVADesglosado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BIVADesglosado { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de moneda
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEMoneda", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEMoneda { get; set; }

        /// <summary>
        /// Valor del tipo de cambio, en su caso
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoCambio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TipoCambio { get; set; }

        /// <summary>
        /// Clave de identificación de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdEmpresa { get; set; }

        /// <summary>
        /// Clave de identificación de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idSucursal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdSucursal { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class FacturaResponse
    {
        /// <summary>
        /// Clave de identificación del registro de la factura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idFacturacion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdFacturacion { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de documento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoDocumento", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CETipoDocumento { get; set; }

        /// <summary>
        /// Folio de la factura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("folioDocumento", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FolioDocumento { get; set; }

        /// <summary>
        /// Clave de ila persona que es  el cliente al que se le genera la factura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clienteFactura", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ClienteFactura { get; set; }

        /// <summary>
        /// Fecha y hora de la generación de la factura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraDocumento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraDocumento { get; set; }

        /// <summary>
        /// Clave de identificación del estatus de la factura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEEstatusDocumento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEEstatusDocumento { get; set; }

        /// <summary>
        /// Número del pedido
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPedido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdPedido { get; set; }

        /// <summary>
        /// Número del pedido de la partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPedidoPartes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdPedidoPartes { get; set; }

        /// <summary>
        /// Clave de identificación de la forma de pago de la factura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEFormaPago", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEFormaPago { get; set; }

        /// <summary>
        /// Monto de descuento, si es que este aplica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("montoDescuento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MontoDescuento { get; set; }

        /// <summary>
        /// Monto de la venta bruta
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ventaBruta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VentaBruta { get; set; }

        /// <summary>
        /// Monto del IVA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("montoIVA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MontoIVA { get; set; }

        /// <summary>
        /// Monto de la venta total
        /// </summary>
        [Newtonsoft.Json.JsonProperty("montoTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MontoTotal { get; set; }

        /// <summary>
        /// Bandera que indica si se tiene el IVA desglosado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bIVADesglosado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BIVADesglosado { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de moneda
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEMoneda", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEMoneda { get; set; }

        /// <summary>
        /// Valor del tipo de cambio, en su caso
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoCambio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TipoCambio { get; set; }

        /// <summary>
        /// Clave de identificación de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdEmpresa { get; set; }

        /// <summary>
        /// Clave de identificación de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idSucursal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdSucursal { get; set; }

        /// <summary>
        /// Fecha en que se  captura el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaAlta { get; set; }

        /// <summary>
        /// Fecha en que se  realiza la última modificación del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaModifica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaModifica { get; set; }

        /// <summary>
        /// Estado del registro. 1=Activo, 0=Inactivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Estatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CrearOrdenDetalleRequest
    {
        /// <summary>
        /// Consecutivo de la actividad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("consec", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Consec { get; set; }

        /// <summary>
        /// Código de la parte
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoParte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoParte { get; set; }

        /// <summary>
        /// Descricpción
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

        /// <summary>
        /// Clave de identificación de la clasificación 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEClasificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEClasificacion { get; set; }

        /// <summary>
        /// Fecha y hora de la solicitud del actividad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraSolicitud", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraSolicitud { get; set; }

        /// <summary>
        /// Hora de inicio de la actividad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraInicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraInicio { get; set; }

        /// <summary>
        /// Hora de termino de la actividad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraTermino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraTermino { get; set; }

        /// <summary>
        /// Clave de identificación del mecánico 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEMecanico", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEMecanico { get; set; }

        /// <summary>
        /// Unidad de tiempo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unidadTiempo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnidadTiempo { get; set; }

        /// <summary>
        /// Cantidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cantidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Cantidad { get; set; }

        /// <summary>
        /// Cantidad de partes surtido
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cantidadSurtido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CantidadSurtido { get; set; }

        /// <summary>
        /// Fecha y hora de surtido
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraSurtido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraSurtido { get; set; }

        /// <summary>
        /// Precio unitario de la parte
        /// </summary>
        [Newtonsoft.Json.JsonProperty("precioUnitario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PrecioUnitario { get; set; }

        /// <summary>
        /// Monto de IVA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iVA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? IVA { get; set; }

        /// <summary>
        /// Monto de IVA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("costo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Costo { get; set; }

        /// <summary>
        /// Monto del subtotal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subtotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Subtotal { get; set; }

        /// <summary>
        /// Clave de identificación del estatus de la clasificación
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEEstatusClasificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEEstatusClasificacion { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de precio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoPrecio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CETipoPrecio { get; set; }

        /// <summary>
        /// Clave de identificación del paquete de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPaqueteServ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdPaqueteServ { get; set; }

        /// <summary>
        /// Cantidad de existencia en partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("existenciaPartes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExistenciaPartes { get; set; }

        /// <summary>
        /// Nivel del trabajador del cual depende el precio de la mano de obra, depende de Bpro 1 2 3
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nivelMO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NivelMO { get; set; }

        /// <summary>
        /// Clave de identificación de la operación
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveOperacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CveOperacion { get; set; }

        /// <summary>
        /// Número de pedido de la partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noPedidoPartes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NoPedidoPartes { get; set; }

        /// <summary>
        /// Clave de la persona que es el proveedor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("proveedor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Proveedor { get; set; }

        /// <summary>
        /// Fecha y hora de surtido
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraPedidoParte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraPedidoParte { get; set; }

        /// <summary>
        /// Factura Trabajo Otros Talleres
        /// </summary>
        [Newtonsoft.Json.JsonProperty("facturaTOT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FacturaTOT { get; set; }

        /// <summary>
        /// Consecutivo de  Trabajo Otros Talleres
        /// </summary>
        [Newtonsoft.Json.JsonProperty("consecutivoTOT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ConsecutivoTOT { get; set; }

        /// <summary>
        /// Monto de IVA total
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iVATOT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? IVATOT { get; set; }

        /// <summary>
        /// Bandera que indica si fue una venta adicional 0 – No es a crédito 1 – Crédito
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bVentaAdicional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BVentaAdicional { get; set; }

        /// <summary>
        /// Monto del tiempo pagado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tiempoPagado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TiempoPagado { get; set; }

        /// <summary>
        /// Monto del costo pagado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("costoPagado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CostoPagado { get; set; }

        /// <summary>
        /// Número de disponibilidad de partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disponiblePartes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DisponiblePartes { get; set; }

        /// <summary>
        /// Clave de identificación del grupo 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEGrupo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEGrupo { get; set; }

        /// <summary>
        /// Clave de identificación del sub grupo 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cESubgrupo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CESubgrupo { get; set; }

        /// <summary>
        /// Número del consecutivo del surtido
        /// </summary>
        [Newtonsoft.Json.JsonProperty("consecutivoSurtido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ConsecutivoSurtido { get; set; }

        /// <summary>
        /// Monto del precio de lista de la partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("precioListaPartes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PrecioListaPartes { get; set; }

        /// <summary>
        /// Monto del porcentaje de descuento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("porcentajeDescuento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PorcentajeDescuento { get; set; }

        /// <summary>
        /// Monto del impuesto descontado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("impuestoDescuento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ImpuestoDescuento { get; set; }

        /// <summary>
        /// Monto del descuento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("montoDescuento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MontoDescuento { get; set; }

        /// <summary>
        /// Código de operación externa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoOperacionExterna", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoOperacionExterna { get; set; }

        /// <summary>
        /// Consecutivo del paquete de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("renServicios", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RenServicios { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de trabajo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoTrab", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CETipoTrab { get; set; }

        /// <summary>
        /// Fecha y hora real de la operación
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraRealOperacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraRealOperacion { get; set; }

        /// <summary>
        /// Tiempo real de la operación
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tiempoRealOperacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TiempoRealOperacion { get; set; }

        /// <summary>
        /// Clave de identificación del motivo de la cancelación 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEMotivoCancelacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEMotivoCancelacion { get; set; }

        /// <summary>
        /// Número total de chips de la operación
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroChipsOperacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NumeroChipsOperacion { get; set; }

        /// <summary>
        /// Tiempo de holgura del tiempo de la actividad  (aumento o disminución)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repTiempo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RepTiempo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CrearOrdenRequest
    {
        /// <summary>
        /// Clave de identificación del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idVehiculosVIN", Required = Newtonsoft.Json.Required.Always)]
        public int IdVehiculosVIN { get; set; }

        /// <summary>
        /// Clave de la orden de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idOrden", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IdOrden { get; set; }

        /// <summary>
        /// Fecha y hora de la orden de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraOrden { get; set; }

        /// <summary>
        /// Clave de la persona que es el propietario del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPropietario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdPropietario { get; set; }

        /// <summary>
        /// Clave de la persona que es el contacto del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContacto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdContacto { get; set; }

        /// <summary>
        /// Clave de la persona que es el conductor del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idConductor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdConductor { get; set; }

        /// <summary>
        /// Clave de la persona que es el responsable del mantenimiento del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idRespMtto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdRespMtto { get; set; }

        /// <summary>
        /// Clave de la persona que es a quién se le va a facturar
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clienteFacturar", Required = Newtonsoft.Json.Required.Always)]
        public int ClienteFacturar { get; set; }

        /// <summary>
        /// Cantidad de kilometraje con el que ingresa el vehículo al servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kilometrajeActual", Required = Newtonsoft.Json.Required.Always)]
        public int KilometrajeActual { get; set; }

        /// <summary>
        /// Número de torre asignada
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noTorre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoTorre { get; set; }

        /// <summary>
        /// Clave de identificación del asesor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEAsesor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CEAsesor { get; set; }

        /// <summary>
        /// Clave de identificación del estatus de la orden
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEEstatusOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEEstatusOrden { get; set; }

        /// <summary>
        /// Fecha y hora de la promesa de entrega del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraPromesaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraPromesaEntrega { get; set; }

        /// <summary>
        /// Número de póliza del seguro, en su caso
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noPolizaSeguro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoPolizaSeguro { get; set; }

        /// <summary>
        /// Clave de identificación de la aseguradora
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEAseguradora", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEAseguradora { get; set; }

        /// <summary>
        /// Número de siniestro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noSiniestro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoSiniestro { get; set; }

        /// <summary>
        /// Forma de pago
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEFormaPago", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEFormaPago { get; set; }

        /// <summary>
        /// Clave de identificación de la forma de pago
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idServicioCita", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdServicioCita { get; set; }

        /// <summary>
        /// Fecha y hora del cierre de la orden de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraCierreOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraCierreOrden { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de orden
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CETipoOrden { get; set; }

        /// <summary>
        /// Bandera que indica si aplica IVA el sevicio 0 – No aplica 1 – Si aplica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bAplicaIva", Required = Newtonsoft.Json.Required.Always)]
        public int BAplicaIva { get; set; }

        /// <summary>
        /// Número de salida del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noSalida", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NoSalida { get; set; }

        /// <summary>
        /// Monto del importe del deducible
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importeDeducible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ImporteDeducible { get; set; }

        /// <summary>
        /// Número de flotilla
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noFlotilla", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NoFlotilla { get; set; }

        /// <summary>
        /// Clave de identificación del motivo de la cancelación del servicio 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEMotivoCancelacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEMotivoCancelacion { get; set; }

        /// <summary>
        /// Clave de identificación de TOYOTA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("katashiki", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Katashiki { get; set; }

        /// <summary>
        /// Número de placa del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroPlaca", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumeroPlaca { get; set; }

        /// <summary>
        /// Número economico del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroEconomico", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumeroEconomico { get; set; }

        /// <summary>
        /// Número de placa del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noEconomico", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoEconomico { get; set; }

        /// <summary>
        /// Bandera que indica si se modifica la cita 0 – No se modifica 1 – Se modifica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bModificarCita", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BModificarCita { get; set; }

        /// <summary>
        /// Bandera que indica si se modifica la Fecha de promesa de entrega 0 – No se modifica 1 – Se modifica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bCambioFechaPromesaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BCambioFechaPromesaEntrega { get; set; }

        /// <summary>
        /// Descripción del motivo de cambio de fecha de entrega del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("motivoCambioFechaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MotivoCambioFechaEntrega { get; set; }

        /// <summary>
        /// Fecha del próximo servicio del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaProximoSevicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaProximoSevicio { get; set; }

        /// <summary>
        /// CFDI
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usoCFDI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UsoCFDI { get; set; }

        /// <summary>
        /// Bandera que indica si el servicio es Express 0 – No es express 1 – Es express
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bExpress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BExpress { get; set; }

        /// <summary>
        /// Fecha de vigencia del seguro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vigenciaSeguro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VigenciaSeguro { get; set; }

        /// <summary>
        /// Bandera que indica si el vehículo cuenta con garantía extendida 0 – No cuenta con garantía extendida 1 – Cuenta con garantía extendida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bGarantiaExtendida", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BGarantiaExtendida { get; set; }

        /// <summary>
        /// Kilometraje con el que cuenta el vehículo a la salida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kilometrajeSalida", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? KilometrajeSalida { get; set; }

        /// <summary>
        /// Bandera que indica si el vehículo es a crédito 0 – No es a crédito 1 – Crédito
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bCredito", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BCredito { get; set; }

        /// <summary>
        /// Clave de identificación de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdEmpresa { get; set; }

        /// <summary>
        /// Clave de identificación de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idSucursal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdSucursal { get; set; }

        /// <summary>
        /// Identificador de la factura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("facturas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Facturas { get; set; }

        /// <summary>
        /// Detalles de la orden de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detalles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CrearOrdenDetalleRequest> Detalles { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ActualizarOrdenRequest
    {
        /// <summary>
        /// Clave de identificación del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idVehiculosVIN", Required = Newtonsoft.Json.Required.Always)]
        public int IdVehiculosVIN { get; set; }

        /// <summary>
        /// Clave de la orden de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idOrden", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IdOrden { get; set; }

        /// <summary>
        /// Fecha y hora de la orden de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraOrden { get; set; }

        /// <summary>
        /// Clave de la persona que es el propietario del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPropietario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdPropietario { get; set; }

        /// <summary>
        /// Clave de la persona que es el contacto del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContacto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdContacto { get; set; }

        /// <summary>
        /// Clave de la persona que es el conductor del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idConductor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdConductor { get; set; }

        /// <summary>
        /// Clave de la persona que es el responsable del mantenimiento del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idRespMtto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdRespMtto { get; set; }

        /// <summary>
        /// Clave de la persona que es a quién se le va a facturar
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clienteFacturar", Required = Newtonsoft.Json.Required.Always)]
        public int ClienteFacturar { get; set; }

        /// <summary>
        /// Cantidad de kilometraje con el que ingresa el vehículo al servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kilometrajeActual", Required = Newtonsoft.Json.Required.Always)]
        public int KilometrajeActual { get; set; }

        /// <summary>
        /// Número de torre asignada
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noTorre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoTorre { get; set; }

        /// <summary>
        /// Clave de identificación del asesor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEAsesor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CEAsesor { get; set; }

        /// <summary>
        /// Clave de identificación del estatus de la orden
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEEstatusOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEEstatusOrden { get; set; }

        /// <summary>
        /// Fecha y hora de la promesa de entrega del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraPromesaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraPromesaEntrega { get; set; }

        /// <summary>
        /// Número de póliza del seguro, en su caso
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noPolizaSeguro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoPolizaSeguro { get; set; }

        /// <summary>
        /// Clave de identificación de la aseguradora
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEAseguradora", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEAseguradora { get; set; }

        /// <summary>
        /// Número de siniestro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noSiniestro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoSiniestro { get; set; }

        /// <summary>
        /// Forma de pago
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEFormaPago", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEFormaPago { get; set; }

        /// <summary>
        /// Clave de identificación de la forma de pago
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idServicioCita", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdServicioCita { get; set; }

        /// <summary>
        /// Fecha y hora del cierre de la orden de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraCierreOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraCierreOrden { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de orden
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CETipoOrden { get; set; }

        /// <summary>
        /// Bandera que indica si aplica IVA el sevicio 0 – No aplica 1 – Si aplica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bAplicaIva", Required = Newtonsoft.Json.Required.Always)]
        public int BAplicaIva { get; set; }

        /// <summary>
        /// Número de salida del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noSalida", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NoSalida { get; set; }

        /// <summary>
        /// Monto del importe del deducible
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importeDeducible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ImporteDeducible { get; set; }

        /// <summary>
        /// Número de flotilla
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noFlotilla", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NoFlotilla { get; set; }

        /// <summary>
        /// Clave de identificación del motivo de la cancelación del servicio 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEMotivoCancelacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEMotivoCancelacion { get; set; }

        /// <summary>
        /// Clave de identificación de TOYOTA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("katashiki", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Katashiki { get; set; }

        /// <summary>
        /// Número de placa del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroPlaca", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumeroPlaca { get; set; }

        /// <summary>
        /// Número economico del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroEconomico", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumeroEconomico { get; set; }

        /// <summary>
        /// Número de placa del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noEconomico", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoEconomico { get; set; }

        /// <summary>
        /// Bandera que indica si se modifica la cita 0 – No se modifica 1 – Se modifica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bModificarCita", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BModificarCita { get; set; }

        /// <summary>
        /// Bandera que indica si se modifica la Fecha de promesa de entrega 0 – No se modifica 1 – Se modifica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bCambioFechaPromesaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BCambioFechaPromesaEntrega { get; set; }

        /// <summary>
        /// Descripción del motivo de cambio de fecha de entrega del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("motivoCambioFechaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MotivoCambioFechaEntrega { get; set; }

        /// <summary>
        /// Fecha del próximo servicio del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaProximoSevicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaProximoSevicio { get; set; }

        /// <summary>
        /// CFDI
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usoCFDI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UsoCFDI { get; set; }

        /// <summary>
        /// Bandera que indica si el servicio es Express 0 – No es express 1 – Es express
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bExpress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BExpress { get; set; }

        /// <summary>
        /// Fecha de vigencia del seguro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vigenciaSeguro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VigenciaSeguro { get; set; }

        /// <summary>
        /// Bandera que indica si el vehículo cuenta con garantía extendida 0 – No cuenta con garantía extendida 1 – Cuenta con garantía extendida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bGarantiaExtendida", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BGarantiaExtendida { get; set; }

        /// <summary>
        /// Kilometraje con el que cuenta el vehículo a la salida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kilometrajeSalida", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? KilometrajeSalida { get; set; }

        /// <summary>
        /// Bandera que indica si el vehículo es a crédito 0 – No es a crédito 1 – Crédito
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bCredito", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BCredito { get; set; }

        /// <summary>
        /// Clave de identificación de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdEmpresa { get; set; }

        /// <summary>
        /// Clave de identificación de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idSucursal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdSucursal { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class OrdenResponse
    {
        /// <summary>
        /// Clave de identificación de la orden de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idServicioOrdenes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdServicioOrdenes { get; set; }

        /// <summary>
        /// Clave de identificación del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idVehiculosVIN", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdVehiculosVIN { get; set; }

        /// <summary>
        /// Clave de la orden de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idOrden", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IdOrden { get; set; }

        /// <summary>
        /// Fecha y hora de la orden de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraOrden { get; set; }

        /// <summary>
        /// Clave de la persona que es el propietario del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPropietario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdPropietario { get; set; }

        /// <summary>
        /// Clave de la persona que es el contacto del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContacto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdContacto { get; set; }

        /// <summary>
        /// Clave de la persona que es el conductor del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idConductor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdConductor { get; set; }

        /// <summary>
        /// Clave de la persona que es el responsable del mantenimiento del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idRespMtto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdRespMtto { get; set; }

        /// <summary>
        /// Clave de la persona que es a quién se le va a facturar
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clienteFacturar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ClienteFacturar { get; set; }

        /// <summary>
        /// Cantidad de kilometraje con el que ingresa el vehículo al servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kilometrajeActual", Required = Newtonsoft.Json.Required.Always)]
        public int KilometrajeActual { get; set; }

        /// <summary>
        /// Número de torre asignada
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noTorre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoTorre { get; set; }

        /// <summary>
        /// Clave de identificación del asesor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEAsesor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CEAsesor { get; set; }

        /// <summary>
        /// Clave de identificación del estatus de la orden
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEEstatusOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEEstatusOrden { get; set; }

        /// <summary>
        /// Fecha y hora de la promesa de entrega del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraPromesaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraPromesaEntrega { get; set; }

        /// <summary>
        /// Número de póliza del seguro, en su caso
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noPolizaSeguro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoPolizaSeguro { get; set; }

        /// <summary>
        /// Clave de identificación de la aseguradora
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEAseguradora", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEAseguradora { get; set; }

        /// <summary>
        /// Número de siniestro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noSiniestro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoSiniestro { get; set; }

        /// <summary>
        /// Forma de pago
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEFormaPago", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEFormaPago { get; set; }

        /// <summary>
        /// Clave de identificación de la forma de pago
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idServicioCita", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdServicioCita { get; set; }

        /// <summary>
        /// Fecha y hora del cierre de la orden de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraCierreOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraCierreOrden { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de orden
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CETipoOrden { get; set; }

        /// <summary>
        /// Bandera que indica si aplica IVA el sevicio 0 – No aplica 1 – Si aplica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bAplicaIva", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BAplicaIva { get; set; }

        /// <summary>
        /// Número de salida del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noSalida", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NoSalida { get; set; }

        /// <summary>
        /// Monto del importe del deducible
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importeDeducible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ImporteDeducible { get; set; }

        /// <summary>
        /// Número de flotilla
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noFlotilla", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NoFlotilla { get; set; }

        /// <summary>
        /// Clave de identificación del motivo de la cancelación del servicio 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEMotivoCancelacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEMotivoCancelacion { get; set; }

        /// <summary>
        /// Clave de identificación de TOYOTA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("katashiki", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Katashiki { get; set; }

        /// <summary>
        /// Número de placa del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroPlaca", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumeroPlaca { get; set; }

        /// <summary>
        /// Número de placa del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noEconomico", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoEconomico { get; set; }

        /// <summary>
        /// Bandera que indica si se modifica la cita 0 – No se modifica 1 – Se modifica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bModificarCita", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BModificarCita { get; set; }

        /// <summary>
        /// Bandera que indica si se modifica la Fecha de promesa de entrega 0 – No se modifica 1 – Se modifica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bCambioFechaPromesaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BCambioFechaPromesaEntrega { get; set; }

        /// <summary>
        /// Descripción del motivo de cambio de fecha de entrega del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("motivoCambioFechaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MotivoCambioFechaEntrega { get; set; }

        /// <summary>
        /// Fecha del próximo servicio del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaProximoSevicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaProximoSevicio { get; set; }

        /// <summary>
        /// CFDI
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usoCFDI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UsoCFDI { get; set; }

        /// <summary>
        /// Bandera que indica si el servicio es Express 0 – No es express 1 – Es express
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bExpress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BExpress { get; set; }

        /// <summary>
        /// Fecha de vigencia del seguro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vigenciaSeguro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VigenciaSeguro { get; set; }

        /// <summary>
        /// Bandera que indica si el vehículo cuenta con garantía extendida 0 – No cuenta con garantía extendida 1 – Cuenta con garantía extendida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bGarantiaExtendida", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BGarantiaExtendida { get; set; }

        /// <summary>
        /// Kilometraje con el que cuenta el vehículo a la salida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kilometrajeSalida", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? KilometrajeSalida { get; set; }

        /// <summary>
        /// Bandera que indica si el vehículo es a crédito 0 – No es a crédito 1 – Crédito
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bCredito", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BCredito { get; set; }

        /// <summary>
        /// Clave de identificación de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdEmpresa { get; set; }

        /// <summary>
        /// Clave de identificación de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idSucursal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdSucursal { get; set; }

        /// <summary>
        /// Fecha de alta
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaAlta { get; set; }

        /// <summary>
        /// Fecha de modificacion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaModifica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaModifica { get; set; }

        /// <summary>
        /// Estado de la la orden. 1=Activo, 0=Inactivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Estatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class OrdenDetalleModel
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("idOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdOrden { get; set; }

        [Newtonsoft.Json.JsonProperty("idOrdenDetalle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdOrdenDetalle { get; set; }

        [Newtonsoft.Json.JsonProperty("codParte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodParte { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("clasificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Clasificacion { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaSolicitud", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaSolicitud { get; set; }

        [Newtonsoft.Json.JsonProperty("horaSolicitud", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HoraSolicitud { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaInicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaInicio { get; set; }

        [Newtonsoft.Json.JsonProperty("horaInicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HoraInicio { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaTermino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaTermino { get; set; }

        [Newtonsoft.Json.JsonProperty("horaTermino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HoraTermino { get; set; }

        [Newtonsoft.Json.JsonProperty("mecanico", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mecanico { get; set; }

        [Newtonsoft.Json.JsonProperty("unidadTiempo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnidadTiempo { get; set; }

        [Newtonsoft.Json.JsonProperty("cantidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cantidad { get; set; }

        [Newtonsoft.Json.JsonProperty("cantidadSurtido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CantidadSurtido { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaSurtido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaSurtido { get; set; }

        [Newtonsoft.Json.JsonProperty("horaSurtido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HoraSurtido { get; set; }

        [Newtonsoft.Json.JsonProperty("precioUnitario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrecioUnitario { get; set; }

        [Newtonsoft.Json.JsonProperty("iva", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iva { get; set; }

        [Newtonsoft.Json.JsonProperty("costo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Costo { get; set; }

        [Newtonsoft.Json.JsonProperty("subtotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subtotal { get; set; }

        [Newtonsoft.Json.JsonProperty("estatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Estatus { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoPrecio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TipoPrecio { get; set; }

        [Newtonsoft.Json.JsonProperty("idPaquete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdPaquete { get; set; }

        [Newtonsoft.Json.JsonProperty("existenciaPartes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExistenciaPartes { get; set; }

        [Newtonsoft.Json.JsonProperty("nivelMO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NivelMO { get; set; }

        [Newtonsoft.Json.JsonProperty("facturaTOT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FacturaTOT { get; set; }

        [Newtonsoft.Json.JsonProperty("pedidoPartes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PedidoPartes { get; set; }

        [Newtonsoft.Json.JsonProperty("proveedor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Proveedor { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaPedidoParte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaPedidoParte { get; set; }

        [Newtonsoft.Json.JsonProperty("ventaAdicional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VentaAdicional { get; set; }

        [Newtonsoft.Json.JsonProperty("costoPagado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CostoPagado { get; set; }

        [Newtonsoft.Json.JsonProperty("ivaTot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IvaTot { get; set; }

        [Newtonsoft.Json.JsonProperty("disponiblePartes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisponiblePartes { get; set; }

        [Newtonsoft.Json.JsonProperty("grupo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Grupo { get; set; }

        [Newtonsoft.Json.JsonProperty("subgrupo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subgrupo { get; set; }

        [Newtonsoft.Json.JsonProperty("orD_CONSEVD", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrD_CONSEVD { get; set; }

        [Newtonsoft.Json.JsonProperty("consecutivoSurtido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConsecutivoSurtido { get; set; }

        [Newtonsoft.Json.JsonProperty("precioListaPartes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrecioListaPartes { get; set; }

        [Newtonsoft.Json.JsonProperty("porcentajeDescuento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PorcentajeDescuento { get; set; }

        [Newtonsoft.Json.JsonProperty("impuestoDescuento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImpuestoDescuento { get; set; }

        [Newtonsoft.Json.JsonProperty("descuento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descuento { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaRealOperacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaRealOperacion { get; set; }

        [Newtonsoft.Json.JsonProperty("horaRealOperacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HoraRealOperacion { get; set; }

        [Newtonsoft.Json.JsonProperty("tiempoRealOperacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TiempoRealOperacion { get; set; }

        [Newtonsoft.Json.JsonProperty("motivoCancelacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MotivoCancelacion { get; set; }

        [Newtonsoft.Json.JsonProperty("tiempoPagado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TiempoPagado { get; set; }

        [Newtonsoft.Json.JsonProperty("renServicios", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RenServicios { get; set; }

        [Newtonsoft.Json.JsonProperty("noChipOperacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoChipOperacion { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoTrab", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TipoTrab { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class OrdenViewModel
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("idOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdOrden { get; set; }

        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdEmpresa { get; set; }

        [Newtonsoft.Json.JsonProperty("idSucursal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdSucursal { get; set; }

        [Newtonsoft.Json.JsonProperty("orE_CVEUSU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrE_CVEUSU { get; set; }

        [Newtonsoft.Json.JsonProperty("orE_IDCLIENTE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrE_IDCLIENTE { get; set; }

        [Newtonsoft.Json.JsonProperty("idClienteFact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdClienteFact { get; set; }

        [Newtonsoft.Json.JsonProperty("kmActual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KmActual { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaHoraOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraOrden { get; set; }

        [Newtonsoft.Json.JsonProperty("noTorre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoTorre { get; set; }

        [Newtonsoft.Json.JsonProperty("idASesor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdASesor { get; set; }

        [Newtonsoft.Json.JsonProperty("estatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Estatus { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaPromesaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaPromesaEntrega { get; set; }

        [Newtonsoft.Json.JsonProperty("horaPromesaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HoraPromesaEntrega { get; set; }

        [Newtonsoft.Json.JsonProperty("idPolizaSeguro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdPolizaSeguro { get; set; }

        [Newtonsoft.Json.JsonProperty("idAseguradora", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdAseguradora { get; set; }

        [Newtonsoft.Json.JsonProperty("noSiniestro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoSiniestro { get; set; }

        [Newtonsoft.Json.JsonProperty("formaPago", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormaPago { get; set; }

        [Newtonsoft.Json.JsonProperty("idCita", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdCita { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaCierreOrden1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaCierreOrden1 { get; set; }

        [Newtonsoft.Json.JsonProperty("horaCierreOrden1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HoraCierreOrden1 { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaCierreOrden2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaCierreOrden2 { get; set; }

        [Newtonsoft.Json.JsonProperty("horaCierreOrden2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HoraCierreOrden2 { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TipoOrden { get; set; }

        [Newtonsoft.Json.JsonProperty("aplicaIva", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AplicaIva { get; set; }

        [Newtonsoft.Json.JsonProperty("idSalida", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdSalida { get; set; }

        [Newtonsoft.Json.JsonProperty("deducible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deducible { get; set; }

        [Newtonsoft.Json.JsonProperty("noFlotilla", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoFlotilla { get; set; }

        [Newtonsoft.Json.JsonProperty("motivoCancelacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MotivoCancelacion { get; set; }

        [Newtonsoft.Json.JsonProperty("katashiki", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Katashiki { get; set; }

        [Newtonsoft.Json.JsonProperty("noPlaca", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoPlaca { get; set; }

        [Newtonsoft.Json.JsonProperty("noEconomico", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoEconomico { get; set; }

        [Newtonsoft.Json.JsonProperty("cambioFechaPromesaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CambioFechaPromesaEntrega { get; set; }

        [Newtonsoft.Json.JsonProperty("motivoCambioFechaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MotivoCambioFechaEntrega { get; set; }

        [Newtonsoft.Json.JsonProperty("idRespMtto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdRespMtto { get; set; }

        [Newtonsoft.Json.JsonProperty("usoCFDI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UsoCFDI { get; set; }

        [Newtonsoft.Json.JsonProperty("vigenciaSeguro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VigenciaSeguro { get; set; }

        [Newtonsoft.Json.JsonProperty("garantiaExtendida", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GarantiaExtendida { get; set; }

        [Newtonsoft.Json.JsonProperty("kmSalida", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KmSalida { get; set; }

        [Newtonsoft.Json.JsonProperty("credito", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Credito { get; set; }

        [Newtonsoft.Json.JsonProperty("express", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Express { get; set; }

        [Newtonsoft.Json.JsonProperty("detalles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OrdenDetalleModel> Detalles { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class InfoOrdenDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    /// <summary>
    /// Clase para la respuesta a la petición de sincronización de los paquetes de servicios
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class InfoOrdenDtoConfirmaSincronizacionResponse
    {
        /// <summary>
        /// Lista con los identiticadores de los registros creados en la base de datos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemsNew", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InfoOrdenDto> ItemsNew { get; set; }

        /// <summary>
        /// Lista con los indentificadores de los registros actualizados en la base de datos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemsUpdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InfoOrdenDto> ItemsUpdate { get; set; }

        /// <summary>
        /// Lista con los identificadores de los registros borrados en la base de datos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemsDelete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InfoOrdenDto> ItemsDelete { get; set; }

        [Newtonsoft.Json.JsonProperty("itemsErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InfoOrdenDto> ItemsErrors { get; set; }

        /// <summary>
        /// Mensaje
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mensaje", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mensaje { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ActualizarOrdenDetalleRequest
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class OrdenDetalleResponse
    {
        /// <summary>
        /// Identificador de la orden de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idServicioOrdenes", Required = Newtonsoft.Json.Required.Always)]
        public int IdServicioOrdenes { get; set; }

        /// <summary>
        /// Consecutivo de la actividad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("consec", Required = Newtonsoft.Json.Required.Always)]
        public int Consec { get; set; }

        /// <summary>
        /// Código de la parte
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoParte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoParte { get; set; }

        /// <summary>
        /// Descricpción
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

        /// <summary>
        /// Clave de identificación de la clasificación 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEClasificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEClasificacion { get; set; }

        /// <summary>
        /// Fecha y hora de la solicitud del actividad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraSolicitud", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraSolicitud { get; set; }

        /// <summary>
        /// Hora de inicio de la actividad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraInicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraInicio { get; set; }

        /// <summary>
        /// Hora de termino de la actividad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraTermino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraTermino { get; set; }

        /// <summary>
        /// Clave de identificación del mecánico 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEMecanico", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEMecanico { get; set; }

        /// <summary>
        /// Unidad de tiempo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unidadTiempo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnidadTiempo { get; set; }

        /// <summary>
        /// Cantidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cantidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Cantidad { get; set; }

        /// <summary>
        /// Cantidad de partes surtido
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cantidadSurtido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CantidadSurtido { get; set; }

        /// <summary>
        /// Fecha y hora de surtido
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraSurtido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraSurtido { get; set; }

        /// <summary>
        /// Precio unitario de la parte
        /// </summary>
        [Newtonsoft.Json.JsonProperty("precioUnitario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PrecioUnitario { get; set; }

        /// <summary>
        /// Monto de IVA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iVA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? IVA { get; set; }

        /// <summary>
        /// Monto de IVA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("costo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Costo { get; set; }

        /// <summary>
        /// Monto del subtotal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subtotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Subtotal { get; set; }

        /// <summary>
        /// Clave de identificación del estatus de la clasificación
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEEstatusClasificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEEstatusClasificacion { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de precio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoPrecio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CETipoPrecio { get; set; }

        /// <summary>
        /// Clave de identificación del paquete de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPaqueteServ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdPaqueteServ { get; set; }

        /// <summary>
        /// Cantidad de existencia en partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("existenciaPartes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExistenciaPartes { get; set; }

        /// <summary>
        /// Nivel del trabajador del cual depende el precio de la mano de obra, depende de Bpro 1 2 3
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nivelMO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NivelMO { get; set; }

        /// <summary>
        /// Clave de identificación de la operación
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveOperacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CveOperacion { get; set; }

        /// <summary>
        /// Número de pedido de la partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noPedidoPartes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NoPedidoPartes { get; set; }

        /// <summary>
        /// Clave de la persona que es el proveedor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("proveedor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Proveedor { get; set; }

        /// <summary>
        /// Fecha y hora de surtido
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraPedidoParte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraPedidoParte { get; set; }

        /// <summary>
        /// Factura Trabajo Otros Talleres
        /// </summary>
        [Newtonsoft.Json.JsonProperty("facturaTOT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FacturaTOT { get; set; }

        /// <summary>
        /// Consecutivo de  Trabajo Otros Talleres
        /// </summary>
        [Newtonsoft.Json.JsonProperty("consecutivoTOT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ConsecutivoTOT { get; set; }

        /// <summary>
        /// Monto de IVA total
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iVATOT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? IVATOT { get; set; }

        /// <summary>
        /// Bandera que indica si fue una venta adicional 0 – No es a crédito 1 – Crédito
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bVentaAdicional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BVentaAdicional { get; set; }

        /// <summary>
        /// Monto del tiempo pagado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tiempoPagado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TiempoPagado { get; set; }

        /// <summary>
        /// Monto del costo pagado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("costoPagado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CostoPagado { get; set; }

        /// <summary>
        /// Número de disponibilidad de partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disponiblePartes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DisponiblePartes { get; set; }

        /// <summary>
        /// Clave de identificación del grupo 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEGrupo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEGrupo { get; set; }

        /// <summary>
        /// Clave de identificación del sub grupo 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cESubgrupo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CESubgrupo { get; set; }

        /// <summary>
        /// Número del consecutivo del surtido
        /// </summary>
        [Newtonsoft.Json.JsonProperty("consecutivoSurtido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ConsecutivoSurtido { get; set; }

        /// <summary>
        /// Monto del precio de lista de la partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("precioListaPartes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PrecioListaPartes { get; set; }

        /// <summary>
        /// Monto del porcentaje de descuento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("porcentajeDescuento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PorcentajeDescuento { get; set; }

        /// <summary>
        /// Monto del impuesto descontado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("impuestoDescuento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ImpuestoDescuento { get; set; }

        /// <summary>
        /// Monto del descuento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("montoDescuento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MontoDescuento { get; set; }

        /// <summary>
        /// Código de operación externa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoOperacionExterna", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoOperacionExterna { get; set; }

        /// <summary>
        /// Consecutivo del paquete de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("renServicios", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RenServicios { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de trabajo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoTrab", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CETipoTrab { get; set; }

        /// <summary>
        /// Fecha y hora real de la operación
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaHoraRealOperacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaHoraRealOperacion { get; set; }

        /// <summary>
        /// Tiempo real de la operación
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tiempoRealOperacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TiempoRealOperacion { get; set; }

        /// <summary>
        /// Clave de identificación del motivo de la cancelación 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEMotivoCancelacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEMotivoCancelacion { get; set; }

        /// <summary>
        /// Número total de chips de la operación
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroChipsOperacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NumeroChipsOperacion { get; set; }

        /// <summary>
        /// Tiempo de holgura del tiempo de la actividad  (aumento o disminución)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repTiempo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RepTiempo { get; set; }

        /// <summary>
        /// Fecha en que se  captura el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaAlta { get; set; }

        /// <summary>
        /// Fecha en que se  realiza la última modificación del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaModifica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaModifica { get; set; }

        /// <summary>
        /// Estado del registro. 1=Activo, 0=Inactivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Estatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CrearPaquetePartesResquet
    {
        [Newtonsoft.Json.JsonProperty("idParte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdParte { get; set; }

        [Newtonsoft.Json.JsonProperty("cvePaqueteServ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CvePaqueteServ { get; set; }

        [Newtonsoft.Json.JsonProperty("cantidadPartes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CantidadPartes { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoPrecio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TipoPrecio { get; set; }

        [Newtonsoft.Json.JsonProperty("precioUnitario", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PrecioUnitario { get; set; }

        [Newtonsoft.Json.JsonProperty("ctoUniEst", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CtoUniEst { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CrearPaqueteOperacionesResquest
    {
        [Newtonsoft.Json.JsonProperty("cvePaqueteServ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CvePaqueteServ { get; set; }

        [Newtonsoft.Json.JsonProperty("idPaqueteServConse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdPaqueteServConse { get; set; }

        [Newtonsoft.Json.JsonProperty("cveOperacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CveOperacion { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoMO", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TipoMO { get; set; }

        [Newtonsoft.Json.JsonProperty("nivelMO", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NivelMO { get; set; }

        [Newtonsoft.Json.JsonProperty("unidadesTimpo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int UnidadesTimpo { get; set; }

        [Newtonsoft.Json.JsonProperty("precioVenta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PrecioVenta { get; set; }

        [Newtonsoft.Json.JsonProperty("costo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Costo { get; set; }

        [Newtonsoft.Json.JsonProperty("codigoEreact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoEreact { get; set; }

        [Newtonsoft.Json.JsonProperty("repTiempo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepTiempo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CrearPaqueteTotsResquest
    {
        [Newtonsoft.Json.JsonProperty("cvePaqueteServ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CvePaqueteServ { get; set; }

        [Newtonsoft.Json.JsonProperty("idPaqueteServConse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdPaqueteServConse { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoTT", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TipoTT { get; set; }

        [Newtonsoft.Json.JsonProperty("precioVenta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PrecioVenta { get; set; }

        [Newtonsoft.Json.JsonProperty("costo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Costo { get; set; }

        [Newtonsoft.Json.JsonProperty("idProveedor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdProveedor { get; set; }

        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("codigoEreact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoEreact { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CrearPaqueteVehiculoResquest
    {
        [Newtonsoft.Json.JsonProperty("idCatalogo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdCatalogo { get; set; }

        [Newtonsoft.Json.JsonProperty("modelo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Modelo { get; set; }

        [Newtonsoft.Json.JsonProperty("cvePaqueteServ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CvePaqueteServ { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CrearPaqueteRequest
    {
        /// <summary>
        /// Clave  del paquete de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cvePaqueteServ", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CvePaqueteServ { get; set; }

        /// <summary>
        /// Nombre del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nombrePaqueteServ", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NombrePaqueteServ { get; set; }

        /// <summary>
        /// Origen de creación del paquete. 0-Planta, 1-Propio, 2-Promocion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("origen", Required = Newtonsoft.Json.Required.Always)]
        public int Origen { get; set; }

        /// <summary>
        /// Descripcion del paquete
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descripcionPaqueteServ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescripcionPaqueteServ { get; set; }

        /// <summary>
        /// Observaciones del paquete
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        /// <summary>
        /// Precio de Unidad de Tiempo, que es con el cual se va a multiplicar los costos de cada elemento, MO, Refacciones y Trabajo Otros Talleres
        /// </summary>
        [Newtonsoft.Json.JsonProperty("precioUT", Required = Newtonsoft.Json.Required.Always)]
        public double PrecioUT { get; set; }

        /// <summary>
        /// Costo de Mano de Obra
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moCosto", Required = Newtonsoft.Json.Required.Always)]
        public double MoCosto { get; set; }

        /// <summary>
        /// Precio de venta de Mano de Obra
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moVenta", Required = Newtonsoft.Json.Required.Always)]
        public double MoVenta { get; set; }

        /// <summary>
        /// Costo de Refacciones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reCosto", Required = Newtonsoft.Json.Required.Always)]
        public double ReCosto { get; set; }

        /// <summary>
        /// Precio de venta de Refacciones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reVenta", Required = Newtonsoft.Json.Required.Always)]
        public double ReVenta { get; set; }

        /// <summary>
        /// Costo de Trabajo en otros talleres
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ttCosto", Required = Newtonsoft.Json.Required.Always)]
        public double TtCosto { get; set; }

        /// <summary>
        /// Precio de venta de Trabajo en otros talleres
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ttVenta", Required = Newtonsoft.Json.Required.Always)]
        public double TtVenta { get; set; }

        /// <summary>
        /// Porcentaje de IVA (Entero)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("porIva", Required = Newtonsoft.Json.Required.Always)]
        public double PorIva { get; set; }

        /// <summary>
        /// Fecha de actualización de refacciones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaCTref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaCTref { get; set; }

        /// <summary>
        /// Fecha de actualización de precio del total de paquete
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaCTprecio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaCTprecio { get; set; }

        /// <summary>
        /// Kilometraje válido para el paquete
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kilometraje", Required = Newtonsoft.Json.Required.Always)]
        public int Kilometraje { get; set; }

        /// <summary>
        /// Clave de identificación de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.Always)]
        public int IdEmpresa { get; set; }

        /// <summary>
        /// Clave de identificación de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idSucursal", Required = Newtonsoft.Json.Required.Always)]
        public int IdSucursal { get; set; }

        /// <summary>
        /// Dato del taller para Andrade
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idTaller", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdTaller { get; set; }

        /// <summary>
        /// Bandera que indica si el paquete es abierto para todos o exclusivo para la empresa-sucursal 1-Exclusivo para empresa sucursal, 0-Abierto
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bExclusivo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BExclusivo { get; set; }

        /// <summary>
        /// Partes del paquete de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CrearPaquetePartesResquet> Partes { get; set; }

        /// <summary>
        /// Operaciones del paquete de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CrearPaqueteOperacionesResquest> Operaciones { get; set; }

        /// <summary>
        /// Tots del paquete de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tots", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CrearPaqueteTotsResquest> Tots { get; set; }

        /// <summary>
        /// Vehiculos del paquete de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vehiculos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CrearPaqueteVehiculoResquest> Vehiculos { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ActualizarPaqueteRequest
    {
        /// <summary>
        /// Clave  del paquete de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cvePaqueteServ", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CvePaqueteServ { get; set; }

        /// <summary>
        /// Nombre del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nombrePaqueteServ", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NombrePaqueteServ { get; set; }

        /// <summary>
        /// Origen de creación del paquete. 0-Planta, 1-Propio, 2-Promocion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("origen", Required = Newtonsoft.Json.Required.Always)]
        public int Origen { get; set; }

        /// <summary>
        /// Descripcion del paquete
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descripcionPaqueteServ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescripcionPaqueteServ { get; set; }

        /// <summary>
        /// Observaciones del paquete
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        /// <summary>
        /// Precio de Unidad de Tiempo, que es con el cual se va a multiplicar los costos de cada elemento, MO, Refacciones y Trabajo Otros Talleres
        /// </summary>
        [Newtonsoft.Json.JsonProperty("precioUT", Required = Newtonsoft.Json.Required.Always)]
        public double PrecioUT { get; set; }

        /// <summary>
        /// Costo de Mano de Obra
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moCosto", Required = Newtonsoft.Json.Required.Always)]
        public double MoCosto { get; set; }

        /// <summary>
        /// Precio de venta de Mano de Obra
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moVenta", Required = Newtonsoft.Json.Required.Always)]
        public double MoVenta { get; set; }

        /// <summary>
        /// Costo de Refacciones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reCosto", Required = Newtonsoft.Json.Required.Always)]
        public double ReCosto { get; set; }

        /// <summary>
        /// Precio de venta de Refacciones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reVenta", Required = Newtonsoft.Json.Required.Always)]
        public double ReVenta { get; set; }

        /// <summary>
        /// Costo de Trabajo en otros talleres
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ttCosto", Required = Newtonsoft.Json.Required.Always)]
        public double TtCosto { get; set; }

        /// <summary>
        /// Precio de venta de Trabajo en otros talleres
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ttVenta", Required = Newtonsoft.Json.Required.Always)]
        public double TtVenta { get; set; }

        /// <summary>
        /// Porcentaje de IVA (Entero)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("porIva", Required = Newtonsoft.Json.Required.Always)]
        public double PorIva { get; set; }

        /// <summary>
        /// Fecha de actualización de refacciones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaCTref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaCTref { get; set; }

        /// <summary>
        /// Fecha de actualización de precio del total de paquete
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaCTprecio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaCTprecio { get; set; }

        /// <summary>
        /// Kilometraje válido para el paquete
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kilometraje", Required = Newtonsoft.Json.Required.Always)]
        public int Kilometraje { get; set; }

        /// <summary>
        /// Clave de identificación de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.Always)]
        public int IdEmpresa { get; set; }

        /// <summary>
        /// Clave de identificación de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idSucursal", Required = Newtonsoft.Json.Required.Always)]
        public int IdSucursal { get; set; }

        /// <summary>
        /// Dato del taller para Andrade
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idTaller", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdTaller { get; set; }

        /// <summary>
        /// Bandera que indica si el paquete es abierto para todos o exclusivo para la empresa-sucursal 1-Exclusivo para empresa sucursal, 0-Abierto
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bExclusivo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BExclusivo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CrearPaquetePartesResponse
    {
        /// <summary>
        /// Identificador del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPaqueteServ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdPaqueteServ { get; set; }

        /// <summary>
        /// Identificador de la parte
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idParte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdParte { get; set; }

        /// <summary>
        /// Clave unica del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cvePaqueteServ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CvePaqueteServ { get; set; }

        /// <summary>
        /// Cantidad de la partes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cantidadPartes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CantidadPartes { get; set; }

        /// <summary>
        /// Tipo precio de la parte
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoPrecio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TipoPrecio { get; set; }

        /// <summary>
        /// Precio unitario de la parte
        /// </summary>
        [Newtonsoft.Json.JsonProperty("precioUnitario", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PrecioUnitario { get; set; }

        /// <summary>
        /// CtoUniEst de la parte
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ctoUniEst", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CtoUniEst { get; set; }

        /// <summary>
        /// Fecha de alta de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaAlta { get; set; }

        /// <summary>
        /// Estado de la empresa. 1=Activo, 0=Inactivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Estatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CrearPaqueteOperacionesResponse
    {
        /// <summary>
        /// Identificador del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPaqueteServ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdPaqueteServ { get; set; }

        /// <summary>
        /// Clave unica del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cvePaqueteServ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CvePaqueteServ { get; set; }

        /// <summary>
        /// Identificador del paquete de servicio consecutivo de la parte
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPaqueteServConse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdPaqueteServConse { get; set; }

        /// <summary>
        /// Clave unica de la operacion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveOperacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CveOperacion { get; set; }

        /// <summary>
        /// descripcion de la operacion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

        /// <summary>
        /// Tipo mo de la operacion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoMO", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TipoMO { get; set; }

        /// <summary>
        /// Nivel mo de la operacion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nivelMO", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NivelMO { get; set; }

        /// <summary>
        /// Unidades Timpo de la operacion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unidadesTimpo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int UnidadesTimpo { get; set; }

        /// <summary>
        /// Precio venta de la operacion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("precioVenta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PrecioVenta { get; set; }

        /// <summary>
        /// Costo de la operacion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("costo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Costo { get; set; }

        /// <summary>
        /// Codigo Ereact de la operacion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoEreact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoEreact { get; set; }

        /// <summary>
        /// Rep Tiempo de la operacion
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repTiempo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepTiempo { get; set; }

        /// <summary>
        /// Fecha de alta de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaAlta { get; set; }

        /// <summary>
        /// Estado de la empresa. 1=Activo, 0=Inactivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Estatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CrearPaqueteTotsResponse
    {
        /// <summary>
        /// Identificador del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPaqueteServ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdPaqueteServ { get; set; }

        /// <summary>
        /// Clave unica del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cvePaqueteServ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CvePaqueteServ { get; set; }

        /// <summary>
        /// Identificador del paquete de servicio consecutivo del tot
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPaqueteServConse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdPaqueteServConse { get; set; }

        /// <summary>
        /// Descripcion del tot
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

        /// <summary>
        /// TipoTT del tot
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoTT", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TipoTT { get; set; }

        /// <summary>
        /// Precio venta del tot
        /// </summary>
        [Newtonsoft.Json.JsonProperty("precioVenta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PrecioVenta { get; set; }

        /// <summary>
        /// Costo del tot
        /// </summary>
        [Newtonsoft.Json.JsonProperty("costo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Costo { get; set; }

        /// <summary>
        /// Identidicador del proccedor del tot
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idProveedor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdProveedor { get; set; }

        /// <summary>
        /// Observaciones del tot
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        /// <summary>
        /// Codigo Ereat del tot
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoEreact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoEreact { get; set; }

        /// <summary>
        /// Fecha de alta de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaAlta { get; set; }

        /// <summary>
        /// Estado de la empresa. 1=Activo, 0=Inactivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Estatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CrearPaqueteVehiculoResponse
    {
        /// <summary>
        /// Identificador del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPaqueteServ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdPaqueteServ { get; set; }

        /// <summary>
        /// Identificador del catalogo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idCatalogo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdCatalogo { get; set; }

        /// <summary>
        /// Modelo del vehiculo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modelo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Modelo { get; set; }

        /// <summary>
        /// Clave unica del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cvePaqueteServ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CvePaqueteServ { get; set; }

        /// <summary>
        /// Fecha de alta de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaAlta { get; set; }

        /// <summary>
        /// Estado de la empresa. 1=Activo, 0=Inactivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Estatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PaqueteResponse
    {
        /// <summary>
        /// Identificador del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPaqueteServ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdPaqueteServ { get; set; }

        /// <summary>
        /// Clave unica del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cvePaqueteServ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CvePaqueteServ { get; set; }

        /// <summary>
        /// Nombre del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nombrePaqueteServ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NombrePaqueteServ { get; set; }

        /// <summary>
        /// Origen del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("origen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Origen { get; set; }

        /// <summary>
        /// Descripcion del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descripcionPaqueteServ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescripcionPaqueteServ { get; set; }

        /// <summary>
        /// observaciones del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        /// <summary>
        /// PrecioUT del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("precioUT", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PrecioUT { get; set; }

        /// <summary>
        /// MOCosto del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moCosto", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MoCosto { get; set; }

        /// <summary>
        /// MOVenta del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moVenta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MoVenta { get; set; }

        /// <summary>
        /// RECosto del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reCosto", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ReCosto { get; set; }

        /// <summary>
        /// REVenta del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reVenta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ReVenta { get; set; }

        /// <summary>
        /// TTCosto del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ttCosto", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TtCosto { get; set; }

        /// <summary>
        /// TTVenta del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ttVenta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TtVenta { get; set; }

        /// <summary>
        /// porIva del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("porIva", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PorIva { get; set; }

        /// <summary>
        /// fechaCTref del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaCTref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaCTref { get; set; }

        /// <summary>
        /// fechaCTprecio del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaCTprecio", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaCTprecio { get; set; }

        /// <summary>
        /// Kilometraje del paquete servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kilometraje", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Kilometraje { get; set; }

        /// <summary>
        /// clave unica de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdEmpresa { get; set; }

        /// <summary>
        /// clave unica de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idSucursal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdSucursal { get; set; }

        /// <summary>
        /// clave unica del taller
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idTaller", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdTaller { get; set; }

        /// <summary>
        /// Exclusivo del paquete de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bExclusivo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BExclusivo { get; set; }

        /// <summary>
        /// Partes del paquete de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CrearPaquetePartesResponse> Partes { get; set; }

        /// <summary>
        /// Operaciones del paquete de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CrearPaqueteOperacionesResponse> Operaciones { get; set; }

        /// <summary>
        /// Tots del paquete de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tots", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CrearPaqueteTotsResponse> Tots { get; set; }

        /// <summary>
        /// Vehiculos del paquete de servicio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vehiculos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CrearPaqueteVehiculoResponse> Vehiculos { get; set; }

        /// <summary>
        /// Fecha de alta de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaAlta { get; set; }

        /// <summary>
        /// Estado de la empresa. 1=Activo, 0=Inactivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Estatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PersonaDatosFisicaRequest
    {
        /// <summary>
        /// Clave de identificación del sexo 1 - Masculino 2 - Femenino
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdf_sexo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Pdf_sexo { get; set; }

        /// <summary>
        /// Descripción de la nacionalidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdf_nacionalidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pdf_nacionalidad { get; set; }

        /// <summary>
        /// Clave de identificación del título de la persona
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tit_idtitulo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Tit_idtitulo { get; set; }

        /// <summary>
        /// Clave de identificación del estado civil
        /// </summary>
        [Newtonsoft.Json.JsonProperty("edc_idedocivil", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Edc_idedocivil { get; set; }

        /// <summary>
        /// Clave de identificación del país de nacimiento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pai_paisnacimiento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Pai_paisnacimiento { get; set; }

        /// <summary>
        /// Fecha de nacimiento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_fechanacimiento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per_fechanacimiento { get; set; }

        /// <summary>
        /// CURP de la persona
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_curp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per_curp { get; set; }

        /// <summary>
        /// Descripción de la situación laboral de la persona
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_situacionlaboral", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per_situacionlaboral { get; set; }

        /// <summary>
        /// Nombre de la empresa de la persona
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_empresa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per_empresa { get; set; }

        /// <summary>
        /// Descripción del puesto que ocupa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_puestoocupa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per_puestoocupa { get; set; }

        /// <summary>
        /// Antigüedad laboral dentro de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_antiguedadlaboral", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per_antiguedadlaboral { get; set; }

        /// <summary>
        /// Monto del ingreso mensual
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_ingresomensual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Per_ingresomensual { get; set; }

        /// <summary>
        /// Clave del país de nacimiento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paisnacionalidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Paisnacionalidad { get; set; }

        /// <summary>
        /// Clave de identificación de la actividad económica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id_acteconomica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id_acteconomica { get; set; }

        /// <summary>
        /// Clave del número telefónico del país
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paisnumtel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Paisnumtel { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PersonaDatosMoralRequest
    {
        /// <summary>
        /// Lugar de emisión de la escritura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdm_lugarescritura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pdm_lugarescritura { get; set; }

        /// <summary>
        /// Fecha del acta constitutiva
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pmd_fechaconstitutiva", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pmd_fechaconstitutiva { get; set; }

        /// <summary>
        /// Fecha de inscripción
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pmd_fechainscripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pmd_fechainscripcion { get; set; }

        /// <summary>
        /// Nombre del representante legal de la persona
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdm_nombrerepresentantelegal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pdm_nombrerepresentantelegal { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de sociedad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tps_idtiposociedad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Tps_idtiposociedad { get; set; }

        /// <summary>
        /// Número de escritura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdm_numeroescritura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Pdm_numeroescritura { get; set; }

        /// <summary>
        /// Libro de inscripción de registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdm_libro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pdm_libro { get; set; }

        /// <summary>
        /// Folio del libro de registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdm_folio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pdm_folio { get; set; }

        /// <summary>
        /// Volumen del libro de registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdm_volumen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pdm_volumen { get; set; }

        /// <summary>
        /// Número de escritura del representante legal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdm_numeroescriturarepresentantelegal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Pdm_numeroescriturarepresentantelegal { get; set; }

        /// <summary>
        /// Libro de inscripción del representante legal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdm_librorepresentantelegal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pdm_librorepresentantelegal { get; set; }

        /// <summary>
        /// Folio del libro del representante legal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdm_foliorepresentantelegal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pdm_foliorepresentantelegal { get; set; }

        /// <summary>
        /// Volumen del libro de registro del representante legal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdm_volumenrepresentantelegal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pdm_volumenrepresentantelegal { get; set; }

        /// <summary>
        /// Lugar del representante legal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdm_lugarrepresentantelegal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pdm_lugarrepresentantelegal { get; set; }

        /// <summary>
        /// Fecha de inscripción del representante legal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdm_fechainscripcionrepresentantelegal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pdm_fechainscripcionrepresentantelegal { get; set; }

        /// <summary>
        /// Clave del país de nacimiento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paisnacionalidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Paisnacionalidad { get; set; }

        /// <summary>
        /// Clave de identificación de la actividad económica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id_acteconomica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id_acteconomica { get; set; }

        /// <summary>
        /// Clave del número telefónico del país
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paisnumtel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Paisnumtel { get; set; }

        /// <summary>
        /// Número de acta constitutiva
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actaconst", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Actaconst { get; set; }

        /// <summary>
        /// Número del fideicomiso
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fideicomiso", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fideicomiso { get; set; }

        /// <summary>
        /// Clave de identificación del representante de  la persona moral
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idreppermoral", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Idreppermoral { get; set; }

        /// <summary>
        /// Estado del representante
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rpublicoestado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rpublicoestado { get; set; }

        /// <summary>
        /// Fecha del representante
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rpublicofecha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rpublicofecha { get; set; }

        /// <summary>
        /// Número del representante público
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rpubliconumero", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rpubliconumero { get; set; }

        /// <summary>
        /// Estado del representante legal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rlegalestado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rlegalestado { get; set; }

        /// <summary>
        /// Fecha del representante legal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rlegalnotario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rlegalnotario { get; set; }

        /// <summary>
        /// Número del representante legal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rlegalnotnumero", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rlegalnotnumero { get; set; }

        /// <summary>
        /// Estado del notario
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tnotarialestado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tnotarialestado { get; set; }

        /// <summary>
        /// Número de notario
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tnotarialnotnumero", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tnotarialnotnumero { get; set; }

        /// <summary>
        /// Nombre del notario público
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tnotarialnotario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tnotarialnotario { get; set; }

        /// <summary>
        /// Número de notaria
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tnotarialnumero", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tnotarialnumero { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PersonaCorreoRequest
    {
        /// <summary>
        /// Bandera que indica el correo predeterminado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cor_predeterminada", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Cor_predeterminada { get; set; }

        /// <summary>
        /// Dirección de correo electrónico
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cor_dircorreo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cor_dircorreo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PersonaDireccionRequest
    {
        /// <summary>
        /// Clave del identificación del rol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dir_idrol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Dir_idrol { get; set; }

        /// <summary>
        /// Clave del tipo de dirección
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tpd_idtipodireccion", Required = Newtonsoft.Json.Required.Always)]
        public int Tpd_idtipodireccion { get; set; }

        /// <summary>
        /// Bandera que indica si la dirección es predeterminada
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dir_predeterminada", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Dir_predeterminada { get; set; }

        /// <summary>
        /// Referencias de la dirección
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referencias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Referencias { get; set; }

        /// <summary>
        /// Clave identificación de la dirección
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dir_iddireccion", Required = Newtonsoft.Json.Required.Always)]
        public int Dir_iddireccion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PersonaRedesSocialesRequest
    {
        /// <summary>
        /// Clave de identificación del tipo de red social 1 - Facebook 2 - Twitter 3 - Instagram
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rds_idtipo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rds_idtipo { get; set; }

        /// <summary>
        /// Bandera que indica la predeterminación de la red social
        /// </summary>
        [Newtonsoft.Json.JsonProperty("red_predeterminado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Red_predeterminado { get; set; }

        /// <summary>
        /// Nombre del usuario de la red social
        /// </summary>
        [Newtonsoft.Json.JsonProperty("red_nombreusuario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Red_nombreusuario { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PersonaRelDmsRequest
    {
        /// <summary>
        /// Clave del usuario dentro de otro sistema
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rdm_cveusrdms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rdm_cveusrdms { get; set; }

        /// <summary>
        /// Clave del sistema origen (Relacionado al nombre corto de la tabla CatalogoGeneralElemento para los elementos del sistema origen)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rdm_cesistemaorigen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rdm_cesistemaorigen { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PersonaTelefonoRequest
    {
        /// <summary>
        /// Clave de identificación del tipo de teléfono 1 Móvil 2 Particular 3 Trabajo 4 Principal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ttl_idtipo", Required = Newtonsoft.Json.Required.Always)]
        public int Ttl_idtipo { get; set; }

        /// <summary>
        /// Bandera que indica la predeterminación del teléfono
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tel_predeterminado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Tel_predeterminado { get; set; }

        /// <summary>
        /// Clave lada del teléfono
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tel_lada", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tel_lada { get; set; }

        /// <summary>
        /// Número de teléfono
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tel_numero", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tel_numero { get; set; }

        /// <summary>
        /// Hora de localización inicial de la persona
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tel_horalocalizaini", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Tel_horalocalizaini { get; set; }

        /// <summary>
        /// Hora de localización final de la persona
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tel_horalocalizafin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Tel_horalocalizafin { get; set; }

        /// <summary>
        /// Extensión del teléfono
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tel_extensiones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tel_extensiones { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PersonaIdentificacionRequest
    {
        [Newtonsoft.Json.JsonProperty("tpi_ididentifica", Required = Newtonsoft.Json.Required.Always)]
        public int Tpi_ididentifica { get; set; }

        [Newtonsoft.Json.JsonProperty("ide_numero", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ide_numero { get; set; }

        [Newtonsoft.Json.JsonProperty("aut_idautoridad", Required = Newtonsoft.Json.Required.Always)]
        public int Aut_idautoridad { get; set; }

        [Newtonsoft.Json.JsonProperty("ide_fechaemision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ide_fechaemision { get; set; }

        [Newtonsoft.Json.JsonProperty("ide_fechavigencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ide_fechavigencia { get; set; }

        [Newtonsoft.Json.JsonProperty("otrotipoidentifica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Otrotipoidentifica { get; set; }

        [Newtonsoft.Json.JsonProperty("esleylavado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Esleylavado { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PersonaRequest
    {
        /// <summary>
        /// Clave de identificación del tipo de persona
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tpo_idtipo", Required = Newtonsoft.Json.Required.Always)]
        public int Tpo_idtipo { get; set; }

        /// <summary>
        /// Apellido paterno de la persona
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_paterno", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per_paterno { get; set; }

        /// <summary>
        /// Apellido materno de la persona
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_materno", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per_materno { get; set; }

        /// <summary>
        /// Nombre o razón social de la persona
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_nombreorazonsocial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per_nombreorazonsocial { get; set; }

        /// <summary>
        /// RFC de la persona
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_rfc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per_rfc { get; set; }

        /// <summary>
        /// Bandera que indica si  se tiene aviso de privacidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_avisopriv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Per_avisopriv { get; set; }

        /// <summary>
        /// Bandera que indica si tiene envío de publicidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_enviopubli", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Per_enviopubli { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de actividad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tpa_idactividad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Tpa_idactividad { get; set; }

        /// <summary>
        /// Nombre comercial
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_nombrecomercial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per_nombrecomercial { get; set; }

        [Newtonsoft.Json.JsonProperty("ctapagopred", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ctapagopred { get; set; }

        /// <summary>
        /// Clave de identificación del medio de contacto
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idmediocontacto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Idmediocontacto { get; set; }

        [Newtonsoft.Json.JsonProperty("idclienterefacciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Idclienterefacciones { get; set; }

        /// <summary>
        /// Clave de identificación de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idsucursal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Idsucursal { get; set; }

        /// <summary>
        /// Clave de identificación del régimen fiscal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idregimenfiscal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Idregimenfiscal { get; set; }

        /// <summary>
        /// Clave de identificación de la forma de pago
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idformapago", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Idformapago { get; set; }

        [Newtonsoft.Json.JsonProperty("idtipoclienteventas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Idtipoclienteventas { get; set; }

        [Newtonsoft.Json.JsonProperty("idaviso", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Idaviso { get; set; }

        [Newtonsoft.Json.JsonProperty("idejecutivo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Idejecutivo { get; set; }

        [Newtonsoft.Json.JsonProperty("datospersonafisica", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonaDatosFisicaRequest Datospersonafisica { get; set; }

        [Newtonsoft.Json.JsonProperty("datospersonamoral", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonaDatosMoralRequest Datospersonamoral { get; set; }

        [Newtonsoft.Json.JsonProperty("correos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PersonaCorreoRequest> Correos { get; set; }

        [Newtonsoft.Json.JsonProperty("direcciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PersonaDireccionRequest> Direcciones { get; set; }

        [Newtonsoft.Json.JsonProperty("redessociales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PersonaRedesSocialesRequest> Redessociales { get; set; }

        [Newtonsoft.Json.JsonProperty("relaciondms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PersonaRelDmsRequest> Relaciondms { get; set; }

        [Newtonsoft.Json.JsonProperty("telefonos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PersonaTelefonoRequest> Telefonos { get; set; }

        [Newtonsoft.Json.JsonProperty("identificaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PersonaIdentificacionRequest> Identificaciones { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class SucursalRequest
    {
        /// <summary>
        /// Identificador de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.Always)]
        public int IdEmpresa { get; set; }

        /// <summary>
        /// Nombre de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nombreSucursal", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NombreSucursal { get; set; }

        /// <summary>
        /// Clave unica de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveSucursal", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CveSucursal { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class PersonaResponse
    {
        /// <summary>
        /// Identificador de la persona
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_idpersona", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Per_idpersona { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de persona
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tpo_idtipo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Tpo_idtipo { get; set; }

        /// <summary>
        /// Apellido paterno de la persona
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_paterno", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per_paterno { get; set; }

        /// <summary>
        /// Apellido materno de la persona
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_materno", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per_materno { get; set; }

        /// <summary>
        /// Nombre o razón social de la persona
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_nombreorazonsocial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per_nombreorazonsocial { get; set; }

        /// <summary>
        /// RFC de la persona
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_rfc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per_rfc { get; set; }

        /// <summary>
        /// Bandera que indica si  se tiene aviso de privacidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_avisopriv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Per_avisopriv { get; set; }

        /// <summary>
        /// Bandera que indica si tiene envío de publicidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_enviopubli", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Per_enviopubli { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de actividad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tpa_idactividad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Tpa_idactividad { get; set; }

        /// <summary>
        /// Nombre comercial
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per_nombrecomercial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per_nombrecomercial { get; set; }

        [Newtonsoft.Json.JsonProperty("ctapagopred", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ctapagopred { get; set; }

        /// <summary>
        /// Clave de identificación del medio de contacto
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idmediocontacto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Idmediocontacto { get; set; }

        [Newtonsoft.Json.JsonProperty("idclienterefacciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Idclienterefacciones { get; set; }

        /// <summary>
        /// Clave de identificación de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idsucursal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Idsucursal { get; set; }

        /// <summary>
        /// Clave de identificación del régimen fiscal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idregimenfiscal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Idregimenfiscal { get; set; }

        /// <summary>
        /// Clave de identificación de la forma de pago
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idformapago", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Idformapago { get; set; }

        [Newtonsoft.Json.JsonProperty("idtipoclienteventas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Idtipoclienteventas { get; set; }

        [Newtonsoft.Json.JsonProperty("idaviso", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Idaviso { get; set; }

        [Newtonsoft.Json.JsonProperty("idejecutivo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Idejecutivo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class SucursalResponse
    {
        /// <summary>
        /// Identificador de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idSucursal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdSucursal { get; set; }

        /// <summary>
        /// Identificador de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdEmpresa { get; set; }

        /// <summary>
        /// Nombre de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nombreSucursal", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NombreSucursal { get; set; }

        /// <summary>
        /// Clave unica de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveSucursal", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CveSucursal { get; set; }

        /// <summary>
        /// Fecha de alta de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaAlta { get; set; }

        /// <summary>
        /// Fecha de modificacion de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaModifica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaModifica { get; set; }

        /// <summary>
        /// Estado de la empresa. 1=Activo, 0=Inactivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Estatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class UnidadColorRequest
    {
        /// <summary>
        /// Clave de identificación del color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idUnidadesCatalogoColor", Required = Newtonsoft.Json.Required.Always)]
        public int IdUnidadesCatalogoColor { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de color del vehículo - Interior - Exterior
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoColor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CETipoColor { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CrearUnidadRequest
    {
        /// <summary>
        /// Clave externa de la unidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveCatalogo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CveCatalogo { get; set; }

        /// <summary>
        /// Año del modelo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("anModelo", Required = Newtonsoft.Json.Required.Always)]
        public int AnModelo { get; set; }

        /// <summary>
        /// Descripción de la unidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

        /// <summary>
        /// Clave de identificación de la marca del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEMarca", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEMarca { get; set; }

        /// <summary>
        /// Clave de identificación de la clase del vehículo - Comercial- Compacto - SUV
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEClase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEClase { get; set; }

        /// <summary>
        /// Clave de identificación de la línea del vehículo - Deportivo - Familiar - Subcompacto
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cELinea", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CELinea { get; set; }

        /// <summary>
        /// Clave vehicular
        /// </summary>
        [Newtonsoft.Json.JsonProperty("claveVehicular", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaveVehicular { get; set; }

        /// <summary>
        /// Clave de identificación de la cantidad de puertas del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEPuertas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEPuertas { get; set; }

        /// <summary>
        /// Clave de identificación del número de cilindros del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEClilindros", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEClilindros { get; set; }

        /// <summary>
        /// Centrímetros cúbicos del motor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cm3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Cm3 { get; set; }

        /// <summary>
        /// Potencia del motor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("potencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Potencia { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de combustible del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cECombustible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CECombustible { get; set; }

        /// <summary>
        /// Clave de identificación de la capacidad de pasajeros del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cECapacidadPasajeros", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CECapacidadPasajeros { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de transmisión del vehículo - Automática - Manual - Easytronic
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETransmision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CETransmision { get; set; }

        /// <summary>
        /// Clave de identificación de la familia del vehículo - AVEO - Suburban - Beat
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEFamilia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEFamilia { get; set; }

        /// <summary>
        /// Observaciones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de motor del vehículo - Híbrido - Gasolina - Diesel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoMotor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CETipoMotor { get; set; }

        /// <summary>
        /// Peso que soporta el vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toneladasCarga", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ToneladasCarga { get; set; }

        /// <summary>
        /// Número de llantas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroLlantas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumeroLlantas { get; set; }

        /// <summary>
        /// Código del modelo del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoModelo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoModelo { get; set; }

        /// <summary>
        /// Código de la planta del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoPlanta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoPlanta { get; set; }

        /// <summary>
        /// Código del motor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoMotor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoMotor { get; set; }

        /// <summary>
        /// Código de la transmisión
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoTransmision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoTransmision { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de tracción del vehículo - 4X4 - 4X2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoTraccion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CETipoTraccion { get; set; }

        /// <summary>
        /// Clave de identificación del país de origen del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEPaisOrigen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEPaisOrigen { get; set; }

        /// <summary>
        /// Cantidad de fuerza del vehículo que puede empujar o jalar (Torque)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("torque", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Torque { get; set; }

        /// <summary>
        /// Descripción del tipo de suspensión
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suspension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Suspension { get; set; }

        /// <summary>
        /// Descripción del tipo de dirección
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoDireccion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TipoDireccion { get; set; }

        /// <summary>
        /// Descripción del tipo de frenos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoFrenos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TipoFrenos { get; set; }

        /// <summary>
        /// Cantidad del voltaje de la batería
        /// </summary>
        [Newtonsoft.Json.JsonProperty("voltajeBateria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VoltajeBateria { get; set; }

        /// <summary>
        /// Kilómetros x litro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kmXLitro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? KmXLitro { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de vestiduras del vehículo - Piel - Tactopiel - Vinipiel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoInterior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CETipoInterior { get; set; }

        /// <summary>
        /// Distancia entre ejes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distanciaEjes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DistanciaEjes { get; set; }

        /// <summary>
        /// Velocidad máxima en km X hora
        /// </summary>
        [Newtonsoft.Json.JsonProperty("velocidadMaxima", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VelocidadMaxima { get; set; }

        /// <summary>
        /// Peso total del vehículo sin pasajeros
        /// </summary>
        [Newtonsoft.Json.JsonProperty("presoBrutoVe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PresoBrutoVe { get; set; }

        /// <summary>
        /// Informacion de los colores de la unidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("colores", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UnidadColorRequest> Colores { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CrearUnidadResponse
    {
        /// <summary>
        /// Clave de identificación de la unidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idUnidadesCatalogo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdUnidadesCatalogo { get; set; }

        /// <summary>
        /// Clave externa de la unidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cveCatalogo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CveCatalogo { get; set; }

        /// <summary>
        /// Año del modelo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("anModelo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AnModelo { get; set; }

        /// <summary>
        /// Descripción de la unidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

        /// <summary>
        /// Clave de identificación de la marca del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEMarca", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEMarca { get; set; }

        /// <summary>
        /// Clave de identificación de la clase del vehículo - Comercial- Compacto - SUV
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEClase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEClase { get; set; }

        /// <summary>
        /// Clave de identificación de la línea del vehículo - Deportivo - Familiar - Subcompacto
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cELinea", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CELinea { get; set; }

        /// <summary>
        /// Clave vehicular
        /// </summary>
        [Newtonsoft.Json.JsonProperty("claveVehicular", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaveVehicular { get; set; }

        /// <summary>
        /// Clave de identificación de la cantidad de puertas del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEPuertas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEPuertas { get; set; }

        /// <summary>
        /// Clave de identificación del número de cilindros del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEClilindros", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEClilindros { get; set; }

        /// <summary>
        /// Centrímetros cúbicos del motor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cm3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Cm3 { get; set; }

        /// <summary>
        /// Potencia del motor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("potencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Potencia { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de combustible del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cECombustible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CECombustible { get; set; }

        /// <summary>
        /// Clave de identificación de la capacidad de pasajeros del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cECapacidadPasajeros", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CECapacidadPasajeros { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de transmisión del vehículo - Automática - Manual - Easytronic
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETransmision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CETransmision { get; set; }

        /// <summary>
        /// Clave de identificación de la familia del vehículo - AVEO - Suburban - Beat
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEFamilia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEFamilia { get; set; }

        /// <summary>
        /// Observaciones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de motor del vehículo - Híbrido - Gasolina - Diesel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoMotor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CETipoMotor { get; set; }

        /// <summary>
        /// Peso que soporta el vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toneladasCarga", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ToneladasCarga { get; set; }

        /// <summary>
        /// Número de llantas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroLlantas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumeroLlantas { get; set; }

        /// <summary>
        /// Código del modelo del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoModelo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoModelo { get; set; }

        /// <summary>
        /// Código de la planta del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoPlanta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoPlanta { get; set; }

        /// <summary>
        /// Código del motor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoMotor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoMotor { get; set; }

        /// <summary>
        /// Código de la transmisión
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoTransmision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoTransmision { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de tracción del vehículo - 4X4 - 4X2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoTraccion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CETipoTraccion { get; set; }

        /// <summary>
        /// Clave de identificación del país de origen del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEPaisOrigen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEPaisOrigen { get; set; }

        /// <summary>
        /// Cantidad de fuerza del vehículo que puede empujar o jalar (Torque)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("torque", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Torque { get; set; }

        /// <summary>
        /// Descripción del tipo de suspensión
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suspension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Suspension { get; set; }

        /// <summary>
        /// Descripción del tipo de dirección
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoDireccion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TipoDireccion { get; set; }

        /// <summary>
        /// Descripción del tipo de frenos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoFrenos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TipoFrenos { get; set; }

        /// <summary>
        /// Cantidad del voltaje de la batería
        /// </summary>
        [Newtonsoft.Json.JsonProperty("voltajeBateria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VoltajeBateria { get; set; }

        /// <summary>
        /// Kilómetros x litro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kmXLitro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? KmXLitro { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de vestiduras del vehículo - Piel - Tactopiel - Vinipiel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoInterior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CETipoInterior { get; set; }

        /// <summary>
        /// Distancia entre ejes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distanciaEjes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DistanciaEjes { get; set; }

        /// <summary>
        /// Velocidad máxima en km X hora
        /// </summary>
        [Newtonsoft.Json.JsonProperty("velocidadMaxima", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VelocidadMaxima { get; set; }

        /// <summary>
        /// Peso total del vehículo sin pasajeros
        /// </summary>
        [Newtonsoft.Json.JsonProperty("presoBrutoVe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PresoBrutoVe { get; set; }

        /// <summary>
        /// Fecha de alta del perfil
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaAlta { get; set; }

        /// <summary>
        /// Estado del perfil. true=Activo, false=Inactivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Estatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class UnidadColorResponse
    {
        /// <summary>
        /// Clave de identificación del color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idUnidadesCatalogoColor", Required = Newtonsoft.Json.Required.Always)]
        public int IdUnidadesCatalogoColor { get; set; }

        /// <summary>
        /// Clave de identificación del tipo de color del vehículo - Interior - Exterior
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cETipoColor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CETipoColor { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class UsuarioResponse
    {
        [Newtonsoft.Json.JsonProperty("idUsuario", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdUsuario { get; set; }

        [Newtonsoft.Json.JsonProperty("nombreUsr", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NombreUsr { get; set; }

        [Newtonsoft.Json.JsonProperty("aPaternoUsr", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string APaternoUsr { get; set; }

        [Newtonsoft.Json.JsonProperty("aMaternoUsr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AMaternoUsr { get; set; }

        [Newtonsoft.Json.JsonProperty("loginUsr", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LoginUsr { get; set; }

        [Newtonsoft.Json.JsonProperty("correoUsr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorreoUsr { get; set; }

        [Newtonsoft.Json.JsonProperty("correoAlterno", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorreoAlterno { get; set; }

        [Newtonsoft.Json.JsonProperty("cEPerfil", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEPerfil { get; set; }

        [Newtonsoft.Json.JsonProperty("nombreEmpresa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NombreEmpresa { get; set; }

        [Newtonsoft.Json.JsonProperty("nombreSucursal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NombreSucursal { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class VehiculoOtrasMarcasRequest
    {
        /// <summary>
        /// Modelo del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oTMModelo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OTMModelo { get; set; }

        /// <summary>
        /// Tipo de auto
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oTMTipoAuto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OTMTipoAuto { get; set; }

        /// <summary>
        /// Marca
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEOTMMarca", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEOTMMarca { get; set; }

        /// <summary>
        /// Tipo de motor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oTMTipoMotor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OTMTipoMotor { get; set; }

        /// <summary>
        /// Cantidad de cilindros
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oTMCilindros", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OTMCilindros { get; set; }

        /// <summary>
        /// Transmisión
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oTMTransmision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OTMTransmision { get; set; }

        /// <summary>
        /// Tracción
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oTMTraccion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OTMTraccion { get; set; }

        /// <summary>
        /// Color externo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEOTMColorExt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEOTMColorExt { get; set; }

        /// <summary>
        /// Color interno
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEOTMColorInt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEOTMColorInt { get; set; }

        /// <summary>
        /// Numero de Motor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oTMNoMotor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OTMNoMotor { get; set; }

        /// <summary>
        /// Puertas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oTMPuertas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OTMPuertas { get; set; }

        /// <summary>
        /// Capacidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oTMCapacidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OTMCapacidad { get; set; }

        /// <summary>
        /// Combustible
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oTMCombustible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OTMCombustible { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class CrearVehiculoRequest
    {
        /// <summary>
        /// Clave de identificación del origen de la unidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEOrigenUnidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEOrigenUnidad { get; set; }

        /// <summary>
        /// Número de serie del automovil
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroSerie", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NumeroSerie { get; set; }

        /// <summary>
        /// Clave de identificación del origen del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idVehiculosVINOrigen", Required = Newtonsoft.Json.Required.Always)]
        public int IdVehiculosVINOrigen { get; set; }

        /// <summary>
        /// Número de placa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroPlaca", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumeroPlaca { get; set; }

        /// <summary>
        /// Clave de identificación del color interno del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idUnidadesCatalogoColorInt", Required = Newtonsoft.Json.Required.Always)]
        public int IdUnidadesCatalogoColorInt { get; set; }

        /// <summary>
        /// Clave de identificación del color externo del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idUnidadesCatalogoColorExt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdUnidadesCatalogoColorExt { get; set; }

        /// <summary>
        /// Número de motor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroMotor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumeroMotor { get; set; }

        /// <summary>
        /// Fecha de venta
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaVenta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaVenta { get; set; }

        /// <summary>
        /// Clave de identificación del distribuidor / vendedor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEDistribuidorVendedor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEDistribuidorVendedor { get; set; }

        /// <summary>
        /// Clave de identificación del vehículo del catálogo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idUnidadesCatalogo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdUnidadesCatalogo { get; set; }

        /// <summary>
        /// Ultimo kilometraje del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ultimoKilometraje", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UltimoKilometraje { get; set; }

        /// <summary>
        /// Garantía extendida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("garantiaExtendida", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GarantiaExtendida { get; set; }

        /// <summary>
        /// Número de inventario
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noInventario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NoInventario { get; set; }

        /// <summary>
        /// Clave de identificación de la situación
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cESituacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CESituacion { get; set; }

        /// <summary>
        /// Clave de identificación de la ubicación
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEUbicacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEUbicacion { get; set; }

        /// <summary>
        /// Clave de la persona que es el propietario del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPropietario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdPropietario { get; set; }

        /// <summary>
        /// Clave de la persona que es el conducto del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idConductor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdConductor { get; set; }

        /// <summary>
        /// Clave de la persona que es el contacto del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContacto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdContacto { get; set; }

        /// <summary>
        /// Clave de la persona que es el responsable del mantenimiento del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idRespMtto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdRespMtto { get; set; }

        /// <summary>
        /// Número de folio de entrega
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NumeroEntrega { get; set; }

        /// <summary>
        /// Fecha de entrega
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaEntrega { get; set; }

        /// <summary>
        /// Texto de las Observaciones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        /// <summary>
        /// Número de serie alternativo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noSerieAlternativo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoSerieAlternativo { get; set; }

        /// <summary>
        /// Número económico
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noEconomico", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoEconomico { get; set; }

        /// <summary>
        /// Clave de identificación de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdEmpresa { get; set; }

        /// <summary>
        /// Clave de identificación de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idSucursal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdSucursal { get; set; }

        [Newtonsoft.Json.JsonProperty("otrasmarcas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VehiculoOtrasMarcasRequest Otrasmarcas { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ActualizarVehiculoRequest
    {
        /// <summary>
        /// Clave de identificación del origen de la unidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEOrigenUnidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEOrigenUnidad { get; set; }

        /// <summary>
        /// Número de serie del automovil
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroSerie", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NumeroSerie { get; set; }

        /// <summary>
        /// Clave de identificación del origen del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idVehiculosVINOrigen", Required = Newtonsoft.Json.Required.Always)]
        public int IdVehiculosVINOrigen { get; set; }

        /// <summary>
        /// Número de placa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroPlaca", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumeroPlaca { get; set; }

        /// <summary>
        /// Clave de identificación del color interno del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idUnidadesCatalogoColorInt", Required = Newtonsoft.Json.Required.Always)]
        public int IdUnidadesCatalogoColorInt { get; set; }

        /// <summary>
        /// Clave de identificación del color externo del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idUnidadesCatalogoColorExt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdUnidadesCatalogoColorExt { get; set; }

        /// <summary>
        /// Número de motor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroMotor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumeroMotor { get; set; }

        /// <summary>
        /// Fecha de venta
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaVenta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaVenta { get; set; }

        /// <summary>
        /// Clave de identificación del distribuidor / vendedor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEDistribuidorVendedor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEDistribuidorVendedor { get; set; }

        /// <summary>
        /// Clave de identificación del vehículo del catálogo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idUnidadesCatalogo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdUnidadesCatalogo { get; set; }

        /// <summary>
        /// Ultimo kilometraje del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ultimoKilometraje", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UltimoKilometraje { get; set; }

        /// <summary>
        /// Garantía extendida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("garantiaExtendida", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GarantiaExtendida { get; set; }

        /// <summary>
        /// Número de inventario
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noInventario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NoInventario { get; set; }

        /// <summary>
        /// Clave de identificación de la situación
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cESituacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CESituacion { get; set; }

        /// <summary>
        /// Clave de identificación de la ubicación
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEUbicacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEUbicacion { get; set; }

        /// <summary>
        /// Clave de la persona que es el propietario del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPropietario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdPropietario { get; set; }

        /// <summary>
        /// Clave de la persona que es el conducto del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idConductor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdConductor { get; set; }

        /// <summary>
        /// Clave de la persona que es el contacto del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContacto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdContacto { get; set; }

        /// <summary>
        /// Clave de la persona que es el responsable del mantenimiento del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idRespMtto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdRespMtto { get; set; }

        /// <summary>
        /// Número de folio de entrega
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NumeroEntrega { get; set; }

        /// <summary>
        /// Fecha de entrega
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaEntrega { get; set; }

        /// <summary>
        /// Texto de las Observaciones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        /// <summary>
        /// Número de serie alternativo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noSerieAlternativo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoSerieAlternativo { get; set; }

        /// <summary>
        /// Número económico
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noEconomico", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoEconomico { get; set; }

        /// <summary>
        /// Clave de identificación de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdEmpresa { get; set; }

        /// <summary>
        /// Clave de identificación de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idSucursal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdSucursal { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class VehiculoResponse
    {
        /// <summary>
        /// Clave de identificación del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idVehiculosVIN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdVehiculosVIN { get; set; }

        /// <summary>
        /// Clave de identificación del origen de la unidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEOrigenUnidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEOrigenUnidad { get; set; }

        /// <summary>
        /// Número de serie del automovil
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroSerie", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NumeroSerie { get; set; }

        /// <summary>
        /// Clave de identificación del origen del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idVehiculosVINOrigen", Required = Newtonsoft.Json.Required.Always)]
        public int IdVehiculosVINOrigen { get; set; }

        /// <summary>
        /// Número de placa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroPlaca", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumeroPlaca { get; set; }

        /// <summary>
        /// Clave de identificación del color interno del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idUnidadesCatalogoColorInt", Required = Newtonsoft.Json.Required.Always)]
        public int IdUnidadesCatalogoColorInt { get; set; }

        /// <summary>
        /// Clave de identificación del color externo del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idUnidadesCatalogoColorExt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdUnidadesCatalogoColorExt { get; set; }

        /// <summary>
        /// Número de motor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroMotor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumeroMotor { get; set; }

        /// <summary>
        /// Fecha de venta
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaVenta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaVenta { get; set; }

        /// <summary>
        /// Clave de identificación del distribuidor / vendedor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEDistribuidorVendedor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEDistribuidorVendedor { get; set; }

        /// <summary>
        /// Clave de identificación del vehículo del catálogo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idUnidadesCatalogo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdUnidadesCatalogo { get; set; }

        /// <summary>
        /// Ultimo kilometraje del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ultimoKilometraje", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UltimoKilometraje { get; set; }

        /// <summary>
        /// Garantía extendida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("garantiaExtendida", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GarantiaExtendida { get; set; }

        /// <summary>
        /// Número de inventario
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noInventario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NoInventario { get; set; }

        /// <summary>
        /// Clave de identificación de la situación
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cESituacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CESituacion { get; set; }

        /// <summary>
        /// Clave de identificación de la ubicación
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cEUbicacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CEUbicacion { get; set; }

        /// <summary>
        /// Clave de la persona que es el propietario del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idPropietario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdPropietario { get; set; }

        /// <summary>
        /// Clave de la persona que es el conducto del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idConductor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdConductor { get; set; }

        /// <summary>
        /// Clave de la persona que es el contacto del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContacto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdContacto { get; set; }

        /// <summary>
        /// Clave de la persona que es el responsable del mantenimiento del vehículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idRespMtto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdRespMtto { get; set; }

        /// <summary>
        /// Número de folio de entrega
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NumeroEntrega { get; set; }

        /// <summary>
        /// Fecha de entrega
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaEntrega", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaEntrega { get; set; }

        /// <summary>
        /// Texto de las Observaciones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        /// <summary>
        /// Número de serie alternativo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noSerieAlternativo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoSerieAlternativo { get; set; }

        /// <summary>
        /// Número económico
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noEconomico", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoEconomico { get; set; }

        /// <summary>
        /// Clave de identificación de la empresa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idEmpresa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdEmpresa { get; set; }

        /// <summary>
        /// Clave de identificación de la sucursal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idSucursal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdSucursal { get; set; }

        /// <summary>
        /// Fecha en que se  captura el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FechaAlta { get; set; }

        /// <summary>
        /// Fecha en que se  realiza la última modificación del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaModifica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaModifica { get; set; }

        /// <summary>
        /// Estado del registro. 1=Activo, 0=Inactivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Estatus { get; set; }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604